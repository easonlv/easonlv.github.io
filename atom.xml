<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Diving into Data</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://easonlv.github.io/"/>
  <updated>2017-03-26T08:36:43.000Z</updated>
  <id>http://easonlv.github.io/</id>
  
  <author>
    <name>Eason Lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一书一世界</title>
    <link href="http://easonlv.github.io/2017/03/26/%E4%B8%80%E4%B9%A6%E4%B8%80%E4%B8%96%E7%95%8C/"/>
    <id>http://easonlv.github.io/2017/03/26/一书一世界/</id>
    <published>2017-03-26T08:34:11.000Z</published>
    <updated>2017-03-26T08:36:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一书一世界"><a href="#一书一世界" class="headerlink" title="一书一世界"></a>一书一世界</h1><h3 id="读《岛上书店》"><a href="#读《岛上书店》" class="headerlink" title="读《岛上书店》"></a>读《岛上书店》</h3><p>岛上书店的原著英文名是The Storied Life of A.J. Fikry，正如英文名直译费克里富有戏剧性的人生，讲述了书店老板A.J.充满故事的生命中，遇到了一些可爱的人，经历着爱与被爱、付出与接受、孤独与陪伴的一生。</p>
<p>A.J. Fikry住在爱丽丝岛上，一个小岛，他拥有岛上唯一的书店，不过最近他更喜欢喝酒，而不是卖书，因为他在为惨死车祸中的妻子妮可感到悲伤。A.J.和妮可是大学的同学，同样都是研究文学的博士生毕业，这也算是志同道合的一对了。妮可去世后，A.J.的颓废使得书店遭遇危机，屋漏偏逢连夜雨，书店里最宝贵的珍藏本图书《帖木儿》也遭窃了。仿佛命运从未眷顾过他，他的内心沦为了荒岛。 </p>
<p>就在此时，神秘的小女孩玛雅，出现在书店中， 看似A.J.照顾起这个孤儿，其实也是玛雅意外地拯救了陷于孤独绝境中的A.J.，并且成为了连接他和小姨子伊斯梅、警长兰比亚斯、出版社女业务员阿米莉娅之间的纽带。</p>
<p>阿米莉娅Amelia是一位出版社代表，邀请爱丽丝书店出售本季最新的作品。 A.J.一开始对她并不友好，后来在接触中慢慢心生爱意。这位中年男人不懂的怎样表达，甚至连去她家看望她都很含蓄，连玛雅看着都急，好在最后两个人终在一起。伊斯梅是妮可的姐姐，也就是A.J.的小姨子，可惜遇到了一个花心的丈夫和一个个谎言，最后和警长兰比亚斯心生爱意。兰比亚斯是A.J.的好朋友，职业的敏感让他在伊斯梅家中发现了一些秘密：关于玛雅的身世、那本被盗的书……</p>
<p>小岛上的主要人物和故事还有很多，但他们的生命紧紧相依，并最终一起走出了人生的困境，遗憾的是A.J.没有战胜肿瘤而离去，书店也有了新的主人，所有对书和生活的热爱都周而复始，愈加汹涌。</p>
<p>如果你喜欢阅读，喜欢书籍和书店，我相信这是一部能吸引你的小说。这儿有些书中的经典语录。</p>
<blockquote>
<p>A.J.：“想要了解一个人，你只需要问一个问题‘你最喜欢哪本书？’”<br>“一旦一个人在乎一件事，就发现自己不得不开始在乎一切事。”</p>
<p>A.J.向阿米莉亚求婚：“……我可以向你保证有书、有交流，还有我的全心全意，艾米。”</p>
<p>兰比亚斯：“有时候别人跟你说你踏上一种旅程，结果却成了另外一种旅程。”<br>“生活中每一桩糟糕事，几乎都是时机不当的结果，每件好事，都是时机恰到好处的结果。”</p>
<p>《迟暮开花》：“因为从心底害怕自己不值得被爱，我们独来独往。然而就是因为独来独往，才让我们以为自己不值得被爱。有一天，你不知道是什么时候，你会驱车上路。有一天，你不知道是什么时候，你会遇见他。你会被爱，因为你今生第一次真正不再孤单。你会选择不再孤单下去。”</p>
</blockquote>
<p>我是利用早上上班坐地铁的半个多小时和晚上睡觉前躺床上看一小时书的时间，零散且不急不慢地在读。从一开始的情节迷茫、情感复杂到最后的人物心理反思，隐情的慢慢暴露，从开始的颓废到心里充满希望走出困境，小岛上的生活仿佛与世隔绝，而爱是最好的礼物，让一无所有的孤岛成为丰富美丽的存在。</p>
<p>所以，每一本书，都是一个世界。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一书一世界&quot;&gt;&lt;a href=&quot;#一书一世界&quot; class=&quot;headerlink&quot; title=&quot;一书一世界&quot;&gt;&lt;/a&gt;一书一世界&lt;/h1&gt;&lt;h3 id=&quot;读《岛上书店》&quot;&gt;&lt;a href=&quot;#读《岛上书店》&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://easonlv.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mac系统安装Xgboost</title>
    <link href="http://easonlv.github.io/2017/03/24/Mac%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Xgboost/"/>
    <id>http://easonlv.github.io/2017/03/24/Mac系统安装Xgboost/</id>
    <published>2017-03-24T14:40:41.000Z</published>
    <updated>2017-03-24T15:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac系统安装Xgboost"><a href="#Mac系统安装Xgboost" class="headerlink" title="Mac系统安装Xgboost"></a>Mac系统安装Xgboost</h1><p><a href="https://github.com/dmlc/xgboost" target="_blank" rel="external">Xgboost</a>是大规模并行boosted tree的工具，它是目前最快最好的开源boosted tree工具包，比常见的工具包快10倍以上。在数据科学方面，有大量kaggle选手选用它进行数据挖掘比赛，其中包括两个以上kaggle比赛的夺冠方案。在工业界规模方面，xgboost的分布式版本有广泛的可移植性，支持在YARN, MPI, Sungrid Engine等各个平台上面运行，并且保留了单机并行版本的各种优化，使得它可以很好地解决于工业界规模的问题。</p>
<p>本文是我今天在Mac系统下成功安（cai）装（keng）Xgboost的笔记（Windows系统用户请出门左转），Mac系统10.12版本按照Xgboost官网<a href="http://xgboost.readthedocs.io/en/latest/build.html" target="_blank" rel="external">安装指南</a>，出现了错误。</p>
<p>如果按照传统Python库用pip来安装：sudo pip install xgboost，同样出现了错误，最后亲测下面方法安装成功。</p>
<h4 id="1-安装-Homebrew"><a href="#1-安装-Homebrew" class="headerlink" title="1.安装 Homebrew"></a>1.安装 <a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></h4><p>Homebrew是Mac系统下非常优秀的包管理工具，相当于Ubuntu的apt-get，安装命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<h4 id="2-安装最新版本的gcc，即gcc-6"><a href="#2-安装最新版本的gcc，即gcc-6" class="headerlink" title="2.安装最新版本的gcc，即gcc-6"></a>2.安装最新版本的gcc，即gcc-6</h4><p>Mac系统默认有Python、Ruby、Shell等环境，但是没有gcc和g++的，安装XCode之后会有clang，而XCode自带的clang是不支持OpenMP的，所以需要重新安装gcc。这个过程比较久，一直在下载，网速快的话差不多半个多小时吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install gcc --without-multilib</div></pre></td></tr></table></figure>
<h4 id="3-下载Xgboost的git源码"><a href="#3-下载Xgboost的git源码" class="headerlink" title="3.下载Xgboost的git源码"></a>3.下载Xgboost的git源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone --recursive https://github.com/dmlc/xgboost  </div><div class="line">cd xgboost</div></pre></td></tr></table></figure>
<h4 id="4-修改配置文件，用于编译"><a href="#4-修改配置文件，用于编译" class="headerlink" title="4.修改配置文件，用于编译"></a>4.修改配置文件，用于编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp make/config.mk ./config.mk</div></pre></td></tr></table></figure>
<p>用vim打开config.mk，修改下面两行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export CC = gcc-6</div><div class="line">export CXX = g++-6</div></pre></td></tr></table></figure>
<p>这样做是为了用之前下载的gcc-6而不是系统已有的gcc来编译。<br>本来按照官网的 make -j4 来编译，但是未成功，所以改用下面这种方法来编译：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build.sh</div></pre></td></tr></table></figure>
<h4 id="5-安装python版Xgboost"><a href="#5-安装python版Xgboost" class="headerlink" title="5.安装python版Xgboost"></a>5.安装python版Xgboost</h4><p>安装Xgboost的Python版需要Numpy、Scipy等数值计算库，建议安装Anaconda，所有的科学计算和数据挖掘库都安装好了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd python-package</div><div class="line">sudo python setup.py install</div></pre></td></tr></table></figure>
<h4 id="6-打开Python验证"><a href="#6-打开Python验证" class="headerlink" title="6.打开Python验证"></a>6.打开Python验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import xgboost as xgb</div></pre></td></tr></table></figure>
<p>OK，没有报错，安装成功。<br>下面你可以用Xgboost算法来玩数据了，官网有好多<a href="http://xgboost.readthedocs.io/en/latest/python/python_intro.html#install-xgboost" target="_blank" rel="external">Example</a>来学习。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</div><div class="line"><span class="comment"># read in data</span></div><div class="line">dtrain = xgb.DMatrix(<span class="string">'demo/data/agaricus.txt.train'</span>)</div><div class="line">dtest = xgb.DMatrix(<span class="string">'demo/data/agaricus.txt.test'</span>)</div><div class="line"><span class="comment"># specify parameters via map</span></div><div class="line">param = &#123;<span class="string">'max_depth'</span>:<span class="number">2</span>, <span class="string">'eta'</span>:<span class="number">1</span>, <span class="string">'silent'</span>:<span class="number">1</span>, <span class="string">'objective'</span>:<span class="string">'binary:logistic'</span> &#125;</div><div class="line">num_round = <span class="number">2</span></div><div class="line">bst = xgb.train(param, dtrain, num_round)</div><div class="line"><span class="comment"># make prediction</span></div><div class="line">preds = bst.predict(dtest)</div></pre></td></tr></table></figure>
<p>如果你想玩kaggle比赛，Xgboost这把屠龙刀更不可少。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mac系统安装Xgboost&quot;&gt;&lt;a href=&quot;#Mac系统安装Xgboost&quot; class=&quot;headerlink&quot; title=&quot;Mac系统安装Xgboost&quot;&gt;&lt;/a&gt;Mac系统安装Xgboost&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://githu
    
    </summary>
    
      <category term="机器学习" scheme="http://easonlv.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://easonlv.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="xgboost" scheme="http://easonlv.github.io/tags/xgboost/"/>
    
  </entry>
  
  <entry>
    <title>spark学习之RDD</title>
    <link href="http://easonlv.github.io/2016/10/03/spark%E5%AD%A6%E4%B9%A0%E4%B9%8BRDD/"/>
    <id>http://easonlv.github.io/2016/10/03/spark学习之RDD/</id>
    <published>2016-10-03T15:47:41.000Z</published>
    <updated>2016-10-03T15:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-RDD基础"><a href="#1-RDD基础" class="headerlink" title="1.RDD基础"></a>1.RDD基础</h2><p>Spark对数据的核心抽象——弹性分布式数据集(Resilient Distributed Dataset,简称RDD)。RDD其实就是分布式的元素集合。在 Spark中,对数据的所有操作不外乎创建 RDD、转化已有RDD以及调用RDD操作进行求值。而在这一切背后,Spark会自动将RDD中的数据分发到集群上,并将操作并行化执行。</p>
<h2 id="2-创建RDD"><a href="#2-创建RDD" class="headerlink" title="2. 创建RDD"></a>2. 创建RDD</h2><p>Spark提供了两种创建 RDD 的方式:  </p>
<ul>
<li>读取外部数据集</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val lines = sc.textFile(&quot;/path/to/README.md&quot;)</div></pre></td></tr></table></figure>
<ul>
<li>在程序中对一个集合进行并行化</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> lines = sc.parallelize(<span class="type">List</span>(<span class="string">"pandas"</span>, <span class="string">"i like pandas"</span>))</div></pre></td></tr></table></figure>
<h2 id="3-RDD操作"><a href="#3-RDD操作" class="headerlink" title="3. RDD操作"></a>3. RDD操作</h2><p>RDD 支持两种操作: <strong>转化操作</strong> <em>transformation</em> 和 <strong>行动操作</strong> <em>action</em></p>
<h3 id="3-1-转化操作"><a href="#3-1-转化操作" class="headerlink" title="3.1 转化操作"></a>3.1 转化操作</h3><p>转化操作是返回一个新的 RDD 的操作,比如 map() 和 filter()<br>map() 接收一个函数,把这个函数用于 RDD 中的每个元素, 将函数的返回结果作为结果RDD中对应元素的值。 如用Scala 实现map计算 RDD中各值的平方：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">val input = sc.parallelize(List(1, 2, 3, 4))</div><div class="line">val result = input.map(x =&gt; x * x)</div><div class="line">println(result.collect().mkString(&quot;,&quot;))</div></pre></td></tr></table></figure>
<p>flatMap()和 map() 类似,函数被分别应用到了输入 RDD 的每个元素上,不过返回的不是一个元素,而是一个返回值序列的迭代器。即对每个输入元素生成多个输出元素，得到由各列表中的元素组成的 RDD。<br>filter() 则接收一个函数,并将 RDD 中满足该函数的 元素放入新的 RDD 中返回，如用 Scala 实现 filter() 转化操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">val inputRDD = sc.textFile(&quot;log.txt&quot;)</div><div class="line">val errorsRDD = inputRDD.filter(line =&gt; line.contains(&quot;error&quot;))</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>函数</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">示例</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>map()</td>
<td style="text-align:left">将函数应用于 RDD 中的每个元素,将返回值构成新的RDD</td>
<td style="text-align:left">rdd.map(x =&gt; x + 1)</td>
<td style="text-align:left">{2, 3, 4, 4}</td>
</tr>
<tr>
<td>flatMap()</td>
<td style="text-align:left">将函数应用于 RDD 中的每个元素,将返回的迭代器的所有内容构成新的RDD，通常用来切分单词</td>
<td style="text-align:left">rdd.flatMap(x =&gt; x.to(3))</td>
<td style="text-align:left">{1, 2, 3,2, 3, 3, 3}</td>
</tr>
<tr>
<td>filter()</td>
<td style="text-align:left">返回一个由通过传给 filter() 的函数的元素组成的 RDD</td>
<td style="text-align:left">rdd.filter(x =&gt; x != 1)</td>
<td style="text-align:left">{2, 3, 3}</td>
</tr>
<tr>
<td>distinct()</td>
<td style="text-align:left">去重</td>
<td style="text-align:left">rdd.distinct()</td>
<td style="text-align:left">{1, 2, 3}</td>
</tr>
<tr>
<td>sample(withReplacement, fraction, [seed])</td>
<td style="text-align:left">对 RDD 采样,以及是否替换</td>
<td style="text-align:left">rdd.sample(false, 0.5)</td>
<td style="text-align:left">非确定的</td>
</tr>
</tbody>
</table>
<h3 id="3-2-行动操作"><a href="#3-2-行动操作" class="headerlink" title="3.2 行动操作"></a>3.2 行动操作</h3><p>行动操作则是向程序返回结果或把结果写入外部系统的操作,会触发实际的计算,比如 count() 和 first()<br>在 Scala 中使用行动操作对错误进行计数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">println(&quot;Input had &quot; + badLinesRDD.count() + &quot; concerning lines&quot;)</div><div class="line">println(&quot;Here are 10 examples:&quot;)</div><div class="line">badLinesRDD.take(10).foreach(println)</div></pre></td></tr></table></figure>
<p>reduce()接收一个函数作为参数,这个函数操作两个RDD的元素类型的数据并返回一个同样类型的新元素。一个简单的例子就是函数 + ,可以用它来对RDD进行累加。<br>Scala 中的 reduce()：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val sum = rdd.reduce((x, y) =&gt; x + y)</div></pre></td></tr></table></figure>
<p>fold() 和 reduce() 类似,接收一个与 reduce() 接收的函数签名相同的函数,再加上一个 “初始值”来作为每个分区第一次调用时的结果。例如 + 对应的 0, * 对应的 1,或拼接操作对应的空列表</p>
<p> collect() 函数可以用来获取整个 RDD 中的数据，但collect() 不能用在大规模数据集上，仅当整个数据集能在单台机器的内存中放得下时才能使用。<br> saveAsTextFile()、saveAsSequenceFile(),或者任意的其他行动操作来把 RDD 的数据内容以各种自带的格式保存起来。</p>
<h2 id="4-RDD持久化"><a href="#4-RDD持久化" class="headerlink" title="4. RDD持久化"></a>4. RDD持久化</h2><p>默认情况下RDD的内容是临时的，但Spark提供了在RDD中持久化数据的机制。第一次调用动作并计算出RDD内容后，RDD的内容可以存储在集群的内存或磁盘上。这样下一次需要调用依赖该RDD的动作时，就不需要从依赖关系中重新计算RDD，数据可以从缓存分区中直接返回：</p>
<blockquote>
<p>cached.cache()<br>cached.count()<br>cached.take(10)  </p>
</blockquote>
<p>在上述代码中，cache方法调用指示在下次计算RDD后，要把RDD存储起来。调用count会导致第一次计算RDD。采取（take）这个动作返回一个本地的Array，包含RDD的前10个元素。但调用take时，访问的是cached已经缓存好的元素，而不是从cached的依赖关系中重新计算出来的。  </p>
<p>当Spark持久化存储一个RDD 时，计算出 RDD 的节点会分别保存它们所求出的分区数据。如果一个有持久化数据的节点发生故障，Spark会在需要用到缓存的数据时重算丢失的数据分区。Spark为持久化RDD定义了几种不同的机制，用不同的StorageLevel值表示。  </p>
<p>rdd.cache()是rdd.persist(StorageLevel.MEMORY)的简写，它将RDD存储为未序列化的对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-RDD基础&quot;&gt;&lt;a href=&quot;#1-RDD基础&quot; class=&quot;headerlink&quot; title=&quot;1.RDD基础&quot;&gt;&lt;/a&gt;1.RDD基础&lt;/h2&gt;&lt;p&gt;Spark对数据的核心抽象——弹性分布式数据集(Resilient Distributed Data
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Implemention of QuickSork</title>
    <link href="http://easonlv.github.io/2016/09/25/Implemention-of-QuickSork/"/>
    <id>http://easonlv.github.io/2016/09/25/Implemention-of-QuickSork/</id>
    <published>2016-09-24T16:55:25.000Z</published>
    <updated>2016-09-30T08:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>###算法过程<br><strong>快速排序</strong> 的思想很简单，整个排序过程只需要三步：</p>
<ol>
<li>在数据集之中，找一个基准点；</li>
<li>建立两个数组，分别存储左边和右边的数组；</li>
<li>利用递归进行下次比较。</li>
</ol>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">public class QuickSort &#123;    //一次划分</div><div class="line">    public static int partition(int[] arr, int left, int right) &#123;</div><div class="line">        int pivotKey = arr[left];</div><div class="line">        int pivotPointer = left;</div><div class="line">        </div><div class="line">        while(left &lt; right) &#123;</div><div class="line">            while(left &lt; right &amp;&amp; arr[right] &gt;= pivotKey)</div><div class="line">                right --;</div><div class="line">            while(left &lt; right &amp;&amp; arr[left] &lt;= pivotKey)</div><div class="line">                left ++;</div><div class="line">            swap(arr, left, right); //把大的交换到右边，把小的交换到左边。</div><div class="line">        &#125;</div><div class="line">        swap(arr, pivotPointer, left); //最后把pivot交换到中间</div><div class="line">        return left;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void quickSort(int[] arr, int left, int right) &#123;</div><div class="line">        if(left &gt;= right)</div><div class="line">            return ;</div><div class="line">        int pivotPos = partition(arr, left, right);</div><div class="line">        quickSort(arr, left, pivotPos-1);</div><div class="line">        quickSort(arr, pivotPos+1, right);</div><div class="line">    &#125;</div><div class="line">    public static void sort(int[] arr) &#123;</div><div class="line">        if(arr == null || arr.length == 0)</div><div class="line">            return ;</div><div class="line">        quickSort(arr, 0, arr.length-1);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void swap(int[] arr, int left, int right) &#123;</div><div class="line">        int temp = arr[left];</div><div class="line">        arr[left] = arr[right];</div><div class="line">        arr[right] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">``` </div><div class="line">### C代码</div><div class="line">``` c</div><div class="line">int Division(int a[],int left, int right) //分割</div><div class="line">&#123;</div><div class="line">    int base=a[left];    //基准元素</div><div class="line">    while(left&lt;right)</div><div class="line">    &#123;</div><div class="line">        while(left&lt;right &amp;&amp; a[right]&gt;base)</div><div class="line">            --right;     //从右向左找第一个比基准小的元素</div><div class="line">        a[left]=a[right];</div><div class="line">        while(left&lt;right &amp;&amp; a[left]&lt;base )</div><div class="line">            ++left;      //从左向右找第一个比基准大的元素</div><div class="line">        a[right]=a[left];</div><div class="line">    &#125;</div><div class="line">    a[left]=base;</div><div class="line">    return left;</div><div class="line">&#125;</div><div class="line">void QuickSort(int a[],int left,int right)</div><div class="line">&#123;</div><div class="line">    int i,j;</div><div class="line">    if(left&lt;right)</div><div class="line">    &#123;</div><div class="line">        i=Division(a,left,right);   //分割</div><div class="line">        QuickSort(a,left,i-1);     //将两部分分别排序</div><div class="line">        QuickSort(a,i+1,right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(arr.length&lt;=<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> arr;<span class="comment">//如果数组只有一个数，就直接返回；</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);<span class="comment">//找到中间数的索引值，如果是浮点数，则向下取整</span></div><div class="line">	<span class="keyword">var</span> numValue = arr.splice(num,<span class="number">1</span>);<span class="comment">//找到中间数的值</span></div><div class="line">	<span class="keyword">var</span> left = [];</div><div class="line">	<span class="keyword">var</span> right = [];</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(arr[i]&lt;numValue)&#123;</div><div class="line">			left.push(arr[i]);<span class="comment">//基准点的左边的数传到左边数组</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			right.push(arr[i]);<span class="comment">//基准点的右边的数传到右边数组</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> quickSort(left).concat(numValue,quickSort(right));<span class="comment">//递归不断重复比较</span></div><div class="line">&#125;</div><div class="line">alert(quickSort([<span class="number">32</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">87</span>]));<span class="comment">//弹出“2,16,32,37,45,87”</span></div></pre></td></tr></table></figure>
<h3 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_sort</span><span class="params">(array,low,high)</span>:</span></div><div class="line">    key = array[low]</div><div class="line">    <span class="keyword">while</span> low &lt; high:</div><div class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> array[high] &gt;= key:</div><div class="line">            high -= <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> array[high] &lt; key:</div><div class="line">            array[low] = array[high]</div><div class="line">            low += <span class="number">1</span></div><div class="line">            array[high] = array[low]</div><div class="line">    array[low] = key</div><div class="line">    <span class="keyword">return</span> low</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array,low,high)</span>:</span></div><div class="line">     <span class="keyword">if</span> low &lt; high:</div><div class="line">        key_index = sub_sort(array,low,high)</div><div class="line">        quick_sort(array,low,key_index)</div><div class="line">        quick_sort(array,key_index+<span class="number">1</span>,high)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    array = [<span class="number">8</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">16</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">2</span>,<span class="number">45</span>,<span class="number">34</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>]</div><div class="line">    <span class="keyword">print</span> array</div><div class="line">    quick_sort(array,<span class="number">0</span>,len(array)<span class="number">-1</span>)</div><div class="line">    <span class="keyword">print</span> array</div></pre></td></tr></table></figure>
<h3 id="R代码"><a href="#R代码" class="headerlink" title="R代码"></a>R代码</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">qsort &lt;- <span class="keyword">function</span>(v) &#123;</div><div class="line">  <span class="keyword">if</span> ( length(v) &gt; <span class="number">1</span> ) </div><div class="line">  &#123;</div><div class="line">    pivot &lt;- (min(v) + max(v))/<span class="number">2.0</span>                            </div><div class="line">    c(qsort(v[v &lt; pivot]), v[v == pivot], qsort(v[v &gt; pivot])) </div><div class="line">  &#125; <span class="keyword">else</span> v</div><div class="line">&#125;</div><div class="line"></div><div class="line">N &lt;- <span class="number">100</span></div><div class="line">vs &lt;- runif(N)</div><div class="line">system.time(u &lt;- qsort(vs))</div><div class="line">print(u)</div><div class="line"></div><div class="line">Qsort &lt;- <span class="keyword">function</span>(x)&#123;</div><div class="line"> <span class="keyword">if</span> (length(x) &lt; <span class="number">2</span>) <span class="keyword">return</span>(x)</div><div class="line"> <span class="keyword">return</span>(c(Qsort(x[x&lt;x[<span class="number">1</span>]]), x[x==x[<span class="number">1</span>]], Qsort(x[x&gt;x[<span class="number">1</span>]])))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;p&gt;###算法过程&lt;br&gt;&lt;strong&gt;快速排序&lt;/strong&gt; 的思想很简单，整个排序过程只需要三步：&lt;/p&gt;
&lt;ol&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://easonlv.github.io/2016/09/22/hello-world/"/>
    <id>http://easonlv.github.io/2016/09/22/hello-world/</id>
    <published>2016-09-22T07:14:27.000Z</published>
    <updated>2016-09-22T07:14:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>

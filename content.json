{"meta":{"title":"Diving into Data","subtitle":"略懂一些算法，只会几种编程语言，半栈工程师，不靠谱分析师。","description":"Algorithm Data Mining Machine Learning","author":"Eason Lv","url":"http://easonlv.github.io"},"pages":[{"title":"","date":"2016-09-28T11:13:34.000Z","updated":"2016-09-28T11:13:34.000Z","comments":false,"path":"tags/index.html","permalink":"http://easonlv.github.io/tags/index.html","excerpt":"","text":"title: tags date: 2016-09-28 19:12:36"}],"posts":[{"title":"工业界深度推荐系统与CTR预估论文","slug":"工业界深度推荐系统与CTR预估论文","date":"2019-09-28T06:15:13.000Z","updated":"2019-09-28T06:19:19.870Z","comments":true,"path":"2019/09/28/工业界深度推荐系统与CTR预估论文/","link":"","permalink":"http://easonlv.github.io/2019/09/28/工业界深度推荐系统与CTR预估论文/","excerpt":"","text":"转载于 https://zhuanlan.zhihu.com/p/83103245 Collaborative Filtering [WWW 17] Neural Collaborative Filtering [SIGIR 18] Collaborative Memory Network for Recommendation Systems Deep部分演进 [SIGIR 17] Neural Factorization Machines for Sparse Predictive Analytics [IJCAI 17] Attentional Factorization Machines: Learning the Weight of Feature Interactions via Attention Networks [ECIR 16] Factorization-supported Neural Network [TOIS 18] Product-Based Neural Networks for User Response Prediction over Multi-Field Categorical Data [RecSys 19] FiBiNET: Combining Feature Importance and Bilinear feature Interaction for Click-Through Rate Prediction [KDD 18] Deep Interest Network for Click-through Rate Prediction [AAAI 19] Deep Interest Evolution Network for Click-Through Rate Prediction [IJCAI 19] Deep Session Interest Network for Click-Through Rate Prediction [CIKM 19] AutoInt: Automatic Feature Interaction Learning via Self-Attentive Neural Networks Wide部分演进 [IJCAI 17] DeepFM: A Factorization-Machine based Neural Network for CTR Prediction [KDD 17] Deep &amp; Cross Network for Ad Click Predictions [KDD 18] xDeepFM: Combining Explicit and Implicit Feature Interactions for Recommender Systems [WWW 19] Feature Generation by Convolutional Neural Network for Click-Through Rate Prediction 强化学习 [WWW 17] DRN: A Deep Reinforcement Learning Framework for News Recommendation [WSDM 19] Top-K Off-Policy Correction for a REINFORCE Recommender System [IJCAI 19] Reinforcement Learning for Slate-based Recommender Systems: A Tractable Decomposition and Practical Methodology 知识图谱 [WWW 17] DKN: Deep Knowledge-Aware Network for News Recommendation [CIKM 18] RippleNet: Propagating User Preferences on the Knowledge Graph for Recommender Systems Embedding技术 [ICCCA 18] Item2Vec-Neural Item Embedding for Collaborative Filtering [RecSys 16] Meta-Prod2Vec: Product Embeddings Using Side-Information for Recommendation [KDD 18] Real-time Personalization using Embeddings for Search Ranking at Airbnb [KDD 18] Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba [WWW 19] NetSMF: Large-Scale Network Embedding as Sparse Matrix Factorization [IJCAI 19] ProNE: Fast and Scalable Network Representation Learning","categories":[{"name":"搜索推荐广告","slug":"搜索推荐广告","permalink":"http://easonlv.github.io/categories/搜索推荐广告/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://easonlv.github.io/tags/paper/"}],"keywords":[{"name":"搜索推荐广告","slug":"搜索推荐广告","permalink":"http://easonlv.github.io/categories/搜索推荐广告/"}]},{"title":"用户画像工业学术界资料全集","slug":"用户画像工业学术界资料全集","date":"2019-08-31T04:13:13.000Z","updated":"2019-08-31T04:31:49.532Z","comments":true,"path":"2019/08/31/用户画像工业学术界资料全集/","link":"","permalink":"http://easonlv.github.io/2019/08/31/用户画像工业学术界资料全集/","excerpt":"","text":"本文转载至 微信公众号 - 专知 https://w.url.cn/s/AIDTB0s原文发表时间：2017-11-13 所有有点久，后续我计划更新最新的一版 基础入门 架构师特刊：用户画像实践 by infoq http://www.infoq.com/cn/minibooks/profile-in-practice luckydogzzy 用户画像学习日记 https://www.gitbook.com/@luckydogzzy 用户画像学习日记： https://www.gitbook.com/book/luckydogzzy/-/details 用户画像文章整理（一）：https://www.gitbook.com/book/luckydogzzy/yhhxzl1/details 用户画像文章整理（二）：https://www.gitbook.com/book/luckydogzzy/-yhhxzl2/details 用户画像从入门到挖坑 by xrzs https://my.oschina.net/leejun2005/blog/906225 浅谈用户画像在电商领域的现状和发展 http://www.woshipm.com/user-research/673939.html 永洪BI:手把手教您搞定用户画像 http://news.yesky.com/prnews/280/85552280.shtml 基于大数据的用户画像构建（理论篇）by 简书 http://www.jianshu.com/p/0d77238771ef 知乎问题：什么是用户画像呢？一般用户画像的作用是什么？ by Alex Chu的回答 - 知乎 https://www.zhihu.com/question/19853605/answer/73136157 Tristan的回答 - 知乎 https://www.zhihu.com/question/19853605/answer/105450827 关于用户画像那些事，看这一文章就够了 https://mp.weixin.qq.com/s/w1b4tHx10ZJAbXD4OoPI6w 看完后，别再说自己不懂用户画像了 https://mp.weixin.qq.com/s/ac7z7OolNQjlPKFZtxjstA 用户画像，找到为你产品买单的那群人 https://mp.weixin.qq.com/s/fVtsBB6XBbHmer5nMBE67A 内部课程｜巧用“用户画像”进行个性化运营 http://mp.weixin.qq.com/s/ZDXKSLAj3KnZP--0AV9z5A 【干货】浅谈“用户画像”方法 http://mp.weixin.qq.com/s/4TthBAMe8PeV-8iAoC_WAw\\ 进阶文章 深度学习在用户画像标签模型中的应用 https://neway6655.github.io/deep%20learning/2017/07/24/deep-learning-in-user-profile-practice.html 腾讯防刷负责人：基于用户画像大数据的电商防刷架构 https://mp.weixin.qq.com/s/E3AsKqWDDgVbqHHr1itW6Q 用户画像系统实践 by 1号店精准化部架构师 http://7xnz4l.com1.z0.glb.clouddn.com/Arch043.pdf 外卖O2O的用户画像实践 by 美团点评技术团队 https://tech.meituan.com/waimai-ups.html 数据驱动精准化营销在大众点评的实践 by 美团点评技术团队 https://tech.meituan.com/dp-growth-hacker.html 基于内容和用户画像的个性化推荐 http://www.rowkey.me/blog/2016/04/07/up-recommend/ 基于知识图谱的用户理解 肖仰华 复旦大学 https://mp.weixin.qq.com/s/8rujPmAy7q35kiJ7QVTABw 基于知识图谱的用户画像关键技术 肖仰华 复旦大学 https://pan.baidu.com/s/1hsKSoyK 大数据背后的360度用户画像，助力11.11新零售 http://www.pmcaff.com/article/index/1009814922629248?from=label&amp;pmc_param%5Blabel_name%5D= 竞赛 2016CCF 大数据精准营销中搜狗用户画像挖掘 代码 一等奖 https://github.com/hengchao0248/ccf2016_sougou 二等奖 https://github.com/AbnerYang/2016CCF-SouGou 第五名 https://github.com/dhdsjy/2016_CCFsougou2 https://github.com/xmojiao/CCF-Competition_Sogou SMP 2016 技术评测 新浪微博数据（包括用户个人信息、用户微博文本以及用户粉丝列表，详见数据描述部分），进行微博用户画像 http://www.cips-smp.org/smp2016/public/cup.html 第五名 https://github.com/scaufengyang/smpcup2016/tree/master/code https://github.com/aprilvkuo/user_profiling_competition SMP 2017 CSDN用户画像技术评测 https://biendata.com/competition/smpcup2017/ Papers App2Vec: Vector Modeling of Mobile Apps and Applicationshttp://paul.rutgers.edu/~qma/research/ma_app2vec.pdf Personalizing search via automated analysis of interests and activities J Teevan, ST Dumais, E Horvitz - … of the 28th annual international ACM …, 2005 https://dl.acm.org/citation.cfm?doid=1076034.1076111 Automatic identification of user interest for personalized search 2006 https://dl.acm.org/citation.cfm?id=1135883 Implicit user modeling for personalized search X Shen, B Tan, CX Zhai CIKM 2005 https://dl.acm.org/citation.cfm?id=1099747 User profiles for personalized information access S Gauch, M Speretta, A Chandramouli, A Micarelli 2007 https://link.springer.com/chapter/10.1007%2F978-3-540-72079-9_2?LI=true Interest-based personalized search Z Ma, G Pant, ORL Sheng - ACM Transactions on Information Systems …, 2007 https://dl.acm.org/citation.cfm?id=1198301 Mining long-term search history to improve search accuracy B Tan, X Shen, CX Zhai KDD 2006 https://dl.acm.org/citation.cfm?id=1150493 Potential for personalization J Teevan, ST Dumais, E Horvitz 2010 https://www.researchgate.net/publication/220286342_Potential_for_Personalization Towards TV recommender system: experiments with user modeling M Bjelica - IEEE Transactions on Consumer Electronics, 2010 https://www.researchgate.net/publication/224184101_Towards_TV_Recommender_System_Experiments_with_User_Modeling Modeling user posting behavior on social media Z Xu, Y Zhang, Y Wu, Q Yang SIGIR 2012 https://dl.acm.org/citation.cfm?id=2348358 Extracting multilayered Communities of Interest from semantic user profiles: Application to group modeling and hybrid recommendations I Cantador, P Castells 2011 https://dl.acm.org/citation.cfm?id=1982988 U-sem: Semantic enrichment, user modeling and mining of usage data on the social web F Abel, I Celik, C Hauff, L Hollink 2011 https://arxiv.org/abs/1104.0126v1 Weakly Supervised User Profile Extraction from Twitter. 2014 http://www.stanford.edu/~jiweil/ppt/attribute.pdf Harvesting multiple sources for user profile learning: a big data study A Farseev, L Nie, M Akbari, TS Chua 2015 https://dl.acm.org/citation.cfm?id=2749381 Improving user profile with personality traits predicted from social media content R Gao, B Hao, S Bai, L Li, A Li, T Zhu 2013 https://dl.acm.org/citation.cfm?id=2507219 视频教程 电商大数据应用之用户画像, 慕课网 [http://www.imooc.com/learn/460] 专访阿里交互数据师：如何通过数据挖掘用户画像 http://meia.me/course/169353 腾讯高级产品经理：如何做好用户画像、用户研究、竞品分析？ http://v.youku.com/v_show/id_XMTU0ODU3NTkzMg==.html?spm=a2h0k.8191407.0.0&amp;from=s1.8-1-1.2\\ 用户画像、性格分析与聊天机器人 by 微软亚洲研究院研究员 谢幸 http://v.youku.com/v_show/id_XMjY1OTkzMzYzNg==.html?spm=a2h0k.8191407.0.0&amp;from=s1.8-1-1.2\\ PPT 用户画像的构建及应用 BY 百分点 https://wenku.baidu.com/view/3d5fb37a6f1aff00bed51eeb.html 基于Spark的实时用户画像分析系统-汪飞-1027 https://wenku.baidu.com/view/ff3676d752d380eb63946d24.html 【分享31页PPT】基于用户画像的大数据挖掘实践 https://wenku.baidu.com/view/684129ba0b1c59eef9c7b443.html 【业界实战】小米大数据总监司马云瑞详解小米用户画像的演进及应用解读（附报告pdf下载） https://mp.weixin.qq.com/s/95Zklj8ovheQV3Gnc-2h-Q","categories":[{"name":"搜索推荐广告","slug":"搜索推荐广告","permalink":"http://easonlv.github.io/categories/搜索推荐广告/"}],"tags":[{"name":"用户画像","slug":"用户画像","permalink":"http://easonlv.github.io/tags/用户画像/"}],"keywords":[{"name":"搜索推荐广告","slug":"搜索推荐广告","permalink":"http://easonlv.github.io/categories/搜索推荐广告/"}]},{"title":"Tensorflow中自定义Loss Function","slug":"Tensorflow中自定义Loss Function","date":"2019-08-25T02:10:10.000Z","updated":"2019-08-31T04:20:15.346Z","comments":true,"path":"2019/08/25/Tensorflow中自定义Loss Function/","link":"","permalink":"http://easonlv.github.io/2019/08/25/Tensorflow中自定义Loss Function/","excerpt":"","text":"1.交叉熵损失函数交叉熵H(p,q)是指按照不真实分布q来编码样本p所需的编码长度的期望。交叉熵损失是神经网络分类问题中常见的损失函数，用来判断模型对真实概率分布估计的准确程度，q(x)是预测的概率分布，p(x) 是真实的概率分布（在多分类问题的 one-hot 编码）$$H(p,q)=-\\sum_x p(x) log\\ q(x)$$ 二分类问题又可进一步展开为：$$H(y,a)=H_y(a)=−(yloga+(1−y)log(1−a))$$ 123# y_ 真实输出值，y 预测值y_ = tf.placeholder(tf.float32, [None, 10])cross_ent = -tf.reduce_mean(tf.reduce_sum(y_*tf.log(y), reduce_indices=[1])) 2.TensorFlow交叉熵实现TensorFlow中交叉熵的损失函数（loss function）主要有以下几种： 2.1 tf.nn.softmax_cross_entropy_with_logits_v2123456def softmax_cross_entropy_with_logits_v2( _sentinel=None, labels=None, logits=None, dim=-1, name=None): Computes softmax cross entropy between logits and labels 原来的函数为nn.softmax_cross_entropy_with_logits，现在deprecated，位于nn_ops.py文件下。 softmax交叉熵loss，参数为网络最后一层的输出和onehot形式的标签。衡量独立互斥离散分类任务的误差，each entry is in exactly one class。 12345678910logits = tf.constant([[1, 2, 3], [2, 1, 3], [3, 1, 2]], tf.float64)y = tf.nn.softmax(logits)y_ = tf.constant([[0, 0, 1], [0, 1, 0], [0, 0, 1]], tf.float64)cross_ent = -tf.reduce_sum(y_ * tf.log(y))cross_ent2 = tf.reduce_sum(tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y_))with tf.Session() as sess: print('cross_ent: ', sess.run(cross_ent)) print('cross_ent2: ', sess.run(cross_ent2)) 2.2 tf.nn.sparse_softmax_cross_entropy_with_logits12345def sparse_softmax_cross_entropy_with_logits( _sentinel=None, labels=None, logits=None, name=None): Computes sparse softmax cross entropy between logits and labels 这个函数和上面的区别就是labels参数应该是没有经过onehot的标签，其余的都是一样的。 2.3 tf.nn. sigmoid_cross_entropy_with_logits12345def sigmoid_cross_entropy_with_logits( _sentinel=None, labels=None, logits=None, name=None): Computes sigmoid cross entropy given logits sigmoid交叉熵loss，与softmax不同的是，该函数首先进行sigmoid操作之后计算交叉熵的损失函数。衡量独立互斥离散分类任务的误差，可以处理多分类任务中的多目标检测，多标记学习等。 实现方式如下： let x = logits, z = labelsThe logistic loss = max(x, 0) - x * z + log(1 + exp(-abs(x))) 2.4 tf.nn.weighted_cross_entropy_with_logits1def weighted_cross_entropy_with_logits(targets, logits, pos_weight, name=None): 交叉熵损失通常定义为:$$ loss_usual = targets * -log(sigmoid(logits)) + (1 - targets) * -log(1 - sigmoid(logits)) $$ 而这种正例加权的损失函数定义为:$$loss_weight = targets * -log(sigmoid(logits)) * pos_weight + (1 - targets) * -log(1 - sigmoid(logits))$$ 当设置参数 pos_weight&gt;1 时，减少了False Negative的数量，增加了召回率。当设置参数 pos_weight&lt;1 时，减少了False Positive的数量，增加了准确率。 实现方式如下： let x = logits, z = targets, q = pos_weight,setting l = (1 + (q - 1) * z)loss = (1 - z) x + l (log(1 + exp(-abs(x))) + max(-x, 0)) 3 TensorFlow自定义损失函数TensorFlow 不仅支持经典的损失的损失函数，还可以优化任意的自定义损失函数。有两个办法： 其一、你自己用C++写一个。你需要把tensorflow的源代码下载下来，然后自己用C++写一个函数。可参考Adding an op。 其二、你把你自己定义的损失函数用tensorflow中的标准函数表示出来。比如你需要MSE（虽然这个已经有了），可以写成 loss = tf.reduce_mean(tf.square(tf.sub(y_real, y_pred))) 例子来源于《Tensorflow实战Google深度学习框架》123456789101112131415161718192021222324252627282930313233343536373839404142434445464748\"\"\"使用交叉熵损失函数的神经网络分类demo\"\"\"import tensorflow as tffrom numpy.random import RandomStateimport osos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'batch_size=8x=tf.placeholder(tf.float32,shape=(None,2),name='x_input')y_=tf.placeholder(tf.float32,shape=(None,1),name='y_input')w2=tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))w1=tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))a=tf.matmul(x,w1)y=tf.matmul(a,w2)#定义损失函数和反向传播算法#自定义交叉熵cross_entropy=-tf.reduce_mean(y_*tf.log(tf.clip_by_value(y,1e-10,1.0)))train_step=tf.train.AdamOptimizer(0.001).minimize(cross_entropy)#模拟生成训练集rdm=RandomState(1)dataset_size=128X=rdm.rand(dataset_size,2)Y=[[int(x1+x2&lt;1)]for (x1,x2) in X]#0、1二分类print(X.shape)print(Y)with tf.Session() as sess: init_op=tf.global_variables_initializer() sess.run(init_op) print(sess.run(w1)) print(sess.run(w2)) STEPS=5000 for i in range(STEPS): start = ( i* batch_size)%dataset_size end= min(start+batch_size,dataset_size) #通过选取的样本训练神经网络或训练参数 sess.run(train_step,feed_dict=&#123;x: X[start:end], y_ : Y[start:end]&#125;) if i % 1000 == 0: #计算每隔一段时间所有数据的交叉熵并输出 total_cross_entropy=sess.run(cross_entropy,feed_dict=&#123;x:X,y_:Y&#125;) print(\"After %d training steps,cross entropy on all data is %g\"%(i,total_cross_entropy)) print(sess.run(w1)) print(sess.run(w2)) 对于理想的分类问题和回归问题，可采用交叉熵或者MSE损失函数，但是对于一些实际的问题，理想的损失函数可能在表达上不能完全表达损失情况，以至于影响对结果的优化。例如：对于产品销量预测问题，表面上是一个回归问题，可使用MSE损失函数。可实际情况下，当预测值大于实际值时，损失值应是正比于商品成本的函数；当预测值小于实际值，损失值是正比于商品利润的函数，多数情况下商品成本和利润是不对等的。自定义损失函数如下:$$Loss(y,y’)=\\sum_{i=1}^n f(y_i,y’_i),f(x,y)= \\left\\{\\begin{matrix}a(x-y), x &gt; y \\\\b(y-x), x \\leqslant y\\end{matrix} \\right.$$ 代码如下：1234567891011121314151617181920212223242526272829303132333435363738\"\"\"使用自定义损失函数的神经网络回归demo\"\"\"import tensorflow as tffrom numpy.random import RandomStatebatch_size=8x=tf.placeholder(tf.float32,shape=(None,2),name='x_input')y_=tf.placeholder(tf.float32,shape=(None,1),name='y_input')w1=tf.Variable(tf.random_normal([2,1],stddev=1,seed=1))#预测值y=tf.matmul(x,w1)loss_less=10loss_more=1#定义损失函数和反向传播算法#自定义损失函数loss=tf.reduce_sum(tf.where(tf.greater(y,y_),(y-y_)*loss_more,(y_-y)*loss_less))train_step=tf.train.AdamOptimizer(0.001).minimize(loss)rdm=RandomState(1)dataset_size=128X=rdm.rand(dataset_size,2)Y=[[x1+x2+rdm.rand()/10.0-0.05]for (x1,x2) in X]with tf.Session() as sess: init_op=tf.global_variables_initializer() sess.run(init_op) STEPS=5000 for i in range(STEPS): start = (i * batch_size) % dataset_size end= min(start+batch_size,dataset_size) #通过选取的样本训练神经网络或训练参数 sess.run(train_step,feed_dict=&#123;x: X[start:end], y_ : Y[start:end]&#125;) print(sess.run(w1))","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/categories/机器学习/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://easonlv.github.io/tags/tensorflow/"}],"keywords":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/categories/机器学习/"}]},{"title":"CCF推荐 国际学术会议","slug":"CCF推荐-国际学术会议","date":"2019-08-22T07:31:17.000Z","updated":"2019-08-31T04:20:06.445Z","comments":true,"path":"2019/08/22/CCF推荐-国际学术会议/","link":"","permalink":"http://easonlv.github.io/2019/08/22/CCF推荐-国际学术会议/","excerpt":"","text":"1.数据挖掘/内容检索https://www.ccf.org.cn/xspj/sjk/sjwj/nrjs/ A类 序号 刊物名称 刊物全称 出版社 地址 1 SIGMOD ACM Conference on Management of Data ACM http://dblp.uni-trier.de/db/conf/sigmod/ 2 SIGKDD ACM Knowledge Discovery and Data Mining ACM http://dblp.uni-trier.de/db/conf/kdd/ 3 ICDE IEEE International Conference on Data Engineering IEEE http://dblp.uni-trier.de/db/conf/icde/ 4 SIGIR International Conference on Research on Development in Information Retrieval ACM http://dblp.uni-trier.de/db/conf/sigir/ 5 VLDB International Conference on Very Large Data Bases Morgan Kaufmann http://dblp.uni-trier.de/db/conf/vldb/ B类 序号 刊物名称 刊物全称 出版社 地址 1 CIKM ACM International Conference on Information and Knowledge Management ACM http://dblp.uni-trier.de/db/conf/cikm/ 2 WSDM ACM International Conference on Web Search and Data Mining ACM http://dblp.uni-trier.de/db/conf/wsdm/ 3 PODS ACM Symposium on Principles of Database Systems ACM http://dblp.uni-trier.de/db/conf/pods/ 4 DASFAA Database Systems for Advanced Applications Springer http://dblp.uni-trier.de/db/conf/dasfaa/ 5 ECML-PKDD European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases Springer http://dblp.uni-trier.de/db/conf/ecml/ 6 ISWC IEEE International Semantic Web Conference IEEE http://dblp.uni-trier.de/db/conf/semweb/ 7 ICDM International Conference on Data Mining IEEE http://dblp.uni-trier.de/db/conf/icdm/ 8 ICDT International Conference on Database Theory Springer http://dblp.uni-trier.de/db/conf/icdt/ 9 EDBT International Conference on Extending DB Technology Springer http://dblp.uni-trier.de/db/conf/edbt/ 10 CIDR International Conference on Innovative Data Systems Research Online Proceeding http://dblp.uni-trier.de/db/conf/cidr/ 11 SDM SIAM International Conference on Data Mining SIAM http://dblp.uni-trier.de/db/conf/sdm/ C类 序号 刊物名称 刊物全称 出版社 地址 1 APWeb Asia Pacific Web Conference Springer http://dblp.uni-trier.de/db/conf/apweb/ 2 DEXA Database and Expert System Applications Springer http://dblp.uni-trier.de/db/conf/dexa/ 3 ECIR European Conference on IR Research Springer http://dblp.uni-trier.de/db/conf/ecir/ 4 ESWC Extended Semantic Web Conference Elsevier http://dblp.uni-trier.de/db/conf/esws/ 5 WebDB International ACM Workshop on Web and Databases ACM http://dblp.uni-trier.de/db/conf/webdb/ 6 ER International Conference on Conceptual Modeling Springer http://dblp.uni-trier.de/db/conf/er/ 7 MDM International Conference on Mobile Data Management IEEE http://dblp.uni-trier.de/db/conf/mdm/ 8 SSDBM International Conference on Scientific and Statistical DB Management IEEE http://dblp.uni-trier.de/db/conf/ssdbm/ 9 WAIM International Conference on Web Age Information Management Springer http://dblp.uni-trier.de/db/conf/waim/ 10 SSTD International Symposium on Spatial and Temporal Databases Springer http://dblp.uni-trier.de/db/conf/ssd/ 11 PAKDD Pacific-Asia Conference on Knowledge Discovery and Data Mining Springer http://dblp.uni-trier.de/db/conf/pakdd/ 12 WISE Web Information Systems Engineering Springer http://dblp.uni-trier.de/db/conf/wise/ 2.人工智能https://www.ccf.org.cn/xspj/rgzn/ A类 序号 刊物名称 刊物全称 出版社 地址 1 AAAI AAAI Conference on Artificial Intelligence AAAI http://dblp.uni-trier.de/db/conf/aaai/ 2 NeurIPS Annual Conference on Neural Information Processing Systems MIT Press http://dblp.uni-trier.de/db/conf/nips/ 3 ACL Annual Meeting of the Association for Computational Linguistics ACL http://dblp.uni-trier.de/db/conf/acl/ 4 CVPR IEEE Conference on Computer Vision and Pattern Recognition IEEE http://dblp.uni-trier.de/db/conf/cvpr/ 5 ICCV International Conference on Computer Vision IEEE http://dblp.uni-trier.de/db/conf/iccv/ 6 ICML International Conference on Machine Learning ACM http://dblp.uni-trier.de/db/conf/icml/ 7 IJCAI International Joint Conference on Artificial Intelligence Morgan Kaufmann http://dblp.uni-trier.de/db/conf/ijcai/ B类 序号 刊物名称 刊物全称 出版社 地址 1 COLT Annual Conference on Computational Learning Theory Springer http://dblp.uni-trier.de/db/conf/colt/ 2 EMNLP Conference on Empirical Methods in Natural Language Processing ACL http://dblp.uni-trier.de/db/conf/emnlp/ 3 ECAI European Conference on Artificial Intelligence IOS Press http://dblp.uni-trier.de/db/conf/ecai/ 4 ECCV European Conference on Computer Vision Springer http://dblp.uni-trier.de/db/conf/eccv/ 5 ICRA IEEE International Conference on Robotics and Automation IEEE http://dblp.uni-trier.de/db/conf/icra/ 6 ICAPS International Conference on Automated Planning and Scheduling AAAI http://dblp.uni-trier.de/db/conf/aips/ 7 ICCBR International Conference on Case-Based Reasoning and Development Springer http://dblp.uni-trier.de/db/conf/iccbr/ 8 COLING International Conference on Computational Linguistics ACM http://dblp.uni-trier.de/db/conf/coling/ 9 KR International Conference on Principles of Knowledge Representation and Reasoning Morgan Kaufmann http://dblp.uni-trier.de/db/conf/kr/ 10 UAI International Conference on Uncertainty in Artificial Intelligence AUAI http://dblp.uni-trier.de/db/conf/uai/ 11 AAMAS International Joint Conference on Autonomous Agents and Multi-agent Systems Springer http://dblp.uni-trier.de/db/conf/atal/index.html 12 PPSN Parallel Problem Solving from Nature Springer http://dblp.uni-trier.de/db/conf/ppsn/ C类 序号 刊物名称 刊物全称 出版社 地址 1 AISTATS Artificial Intelligence and Statistics JMLR http://dblp.uni-trier.de/db/conf/aistats/ 2 ACCV Asian Conference on Computer Vision Springer http://dblp.uni-trier.de/db/conf/accv/ 3 ACML Asian Conference on Machine Learning JMLR http://dblp.uni-trier.de/db/conf/acml/ 4 BMVC British Machine Vision Conference British Machine Vision Association http://dblp.uni-trier.de/db/conf/bmvc/ 5 NLPCC CCF International Conference on Natural Language Processing and Chinese Computing Springer https://dblp.uni-trier.de/db/conf/nlpcc/ 6 CoNLL Conference on Computational Natural Language Learning Association for Computational Linguistics http://dblp.uni-trier.de/db/conf/conll 7 GECCO Genetic and Evolutionary Computation Conference ACM http://dblp.uni-trier.de/db/conf/gecco/ 8 ICTAI IEEE International Conference on Tools with Artificial Intelligence IEEE http://dblp.uni-trier.de/db/conf/ictai/ 9 IROS IEEE\\RSJ International Conference on Intelligent Robots and Systems IEEE http://dblp.uni-trier.de/db/conf/iros/ 10 ALT International Conference on Algorithmic Learning Theory Springer http://dblp.uni-trier.de/db/conf/alt/ 11 ICANN International Conference on Artificial Neural Networks Springer http://dblp.uni-trier.de/db/conf/icann/ 12 FG International Conference on Automatic Face and Gesture Recognition IEEE http://dblp.uni-trier.de/db/conf/fgr/ 13 ICDAR International Conference on Document Analysis and Recognition IEEE http://dblp.uni-trier.de/db/conf/icdar/ 14 ILP International Conference on Inductive Logic Programming Springer http://dblp.uni-trier.de/db/conf/ilp/ 15 KSEM International conference on Knowledge Science,Engineering and Management Springer http://dblp.uni-trier.de/db/conf/ksem/ 16 ICONIP International Conference on Neural Information Processing Springer http://dblp.uni-trier.de/db/conf/iconip/ 17 ICPR International Conference on Pattern Recognition IEEE http://dblp.uni-trier.de/db/conf/icpr/ 18 ICB International Joint Conference on Biometrics IEEE http://dblp.uni-trier.de/db/conf/icb/ 19 IJCNN International Joint Conference on Neural Networks IEEE http://dblp.uni-trier.de/db/conf/ijcnn/ 20 PRICAI Pacific Rim International Conference on Artificial Intelligence Springer http://dblp.uni-trier.de/db/conf/pricai/ 21 NAACL The Annual Conference of the North American Chapter of the Association for Computational Linguistics NAACL http://dblp.uni-trier.de/db/conf/naacl/","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/categories/机器学习/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://easonlv.github.io/tags/paper/"}],"keywords":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/categories/机器学习/"}]},{"title":"论文笔记《Applying Deep Learning To Airbnb Search》","slug":"KDD2018_Applying-Deep-Learning-To-Airbnb-Search","date":"2019-03-27T11:10:52.000Z","updated":"2019-08-31T04:20:20.980Z","comments":true,"path":"2019/03/27/KDD2018_Applying-Deep-Learning-To-Airbnb-Search/","link":"","permalink":"http://easonlv.github.io/2019/03/27/KDD2018_Applying-Deep-Learning-To-Airbnb-Search/","excerpt":"","text":"Abstract在Airbnb机器学习应用中，搜索排序是获得最大成功的案例之一。大多数初始收益是来自于梯度提升决策树模型（即GBDT）。 然而，随着时间的推移收益趋于稳定。 本文讨论了我们尝试应用神经网络的这样一个突破性的工作。我们提出的观点并非旨在推动新建模技术的前沿。 相反，我们的故事是我们发现在将神经网络应用于现实生活产品时有用的元素。对我们来说是深度学习的曲线比较陡。但对于开始类似工作的其他团队来说，希望对我们的挣扎和胜利的描述将提供一些有用的指示。 一路顺风！ 1 IntroductionAirbnb是一个双向市场：hosts房东 vs guests房客 。 搜索排序模型最早是人工设计的打分函数，就是使用了策略。后来使用了GBDT模型替换了这个策略，Airbnb 的房屋预定得到了大幅度的提升，于是就迭代优化了很多次。 本文的搜索排名只是 Airbnb 模型生态中的一部分，所有的模型最后的目标都是给客户呈现一个最优的房屋预定列表。生态中的模型有一些是预测房东接受客人预定的概率，一些是预测客人在体验上给五星的概率等。本论文只讨论搜索排名的模型，这个模型负责根据客户预定房屋的可能性给房屋检索列表做一个最优的排序。 一个成功的搜索会话是以客户开始搜索为开始，以客户预定房屋成功为结束。 本文主要从以下几个方面展开： 总结过去一段时间模型架构是如何演变的； 特征工程和系统工程的思考； 介绍一些内部工具和超参数方面的探索； 总结回顾。 2 Model Evolution 模型演化2.1 Simple NN单隐层的NN，32个全连接单元，ReLU激活函数。 NN的输入特征和GBDT模型一样，训练的目标函数都是最小化 L2 损失函数，都是与GBDT保持一致。 2.2 Lambdarank NN将NN和Lambdarank结合使我们首次得到突破。离线我们使用NDCG作为主要指标，因此在NN模型中可以直接优化NDCG，相比于之前的简单NN会有两个重要的改进： 构造{booked listing, not-booked listing}这个pair对作为训练样本集。训练过程中，最小化预定列表和非预定列表得分之间的交叉熵损失。 交换两个listing的位置构成一个pair对，然后加权求和。 123456789101112131415161718192021222324def apply_discount(x): '''Apply positional discount curve''' return np.log(2.0)/np.log(2.0 + x)def compute_weights(logit_op, session): '''Compute loss weights based on delta ndcg. logit_op is a [BATCH_SIZE, NUM_SAMPLES] shaped tensor corresponding to the output layer of the network. Each row corresponds to a search and each column a listing in the search result. Column 0 is the booked listing, while columns 1 through NUM_SAMPLES - 1 the not-booked listings. ''' logit_vals = session.run(logit_op) ranks = NUM_SAMPLES - 1 - logit_vals.argsort(axis=1) discounted_non_booking = apply_discount(ranks[:, 1:]) discounted_booking = apply_discount(np.expand_dims(ranks[:, 0], axis=1)) discounted_weights = np.abs(discounted_booking - discounted_non_booking) return discounted_weight# Compute the pairwise losspairwise_loss = tf.nn.sigmoid_cross_entropy_with_logits(targets=tf.ones_like(logit_op[:, 0]), logits=logit_op[:, 0] - logit_op[:, i:] )# Compute the lambdarank weights based on delta ndcgweights = compute_weights(logit_op, session)#Multiply pairwise loss by lambdarank weightsloss = tf.reduce_mean(tf.multiply(pairwise_loss, weights)) 2.3 Decision Tree/Factorization Machine NN受到Deep &amp; Cross Network for Ad Click Predictions，也就是DCN的启发，新模型融合了决策树、因子分解机、神经网络三者的优点。 将FM预测的结果作为一个特征加入NN，将GBDT的每棵树的叶子节点index作为一个类别特征加入NN。 2.4 DeepNN在最后的尝试中，我们放弃了所有的复杂模型，精简到使用10倍训练数据来训练一个两个隐层的DNN模型。网络架构如下： 输入层：195 个类别特征做 embedding 第一个隐层： 127 个全连接 ReLU 第二个隐层： 83 个全连接 ReLU 至于为啥隐层数目是127、83这样的数字而不是传统的128、64这种2的幂数，我很好奇的问过作者，得到的回复是：I like prime number. We later tested Lambdarank vs pairwise loss in isolation and found them neutral in bookings. So we deprecated Lambdarank and now use the pairwise loss as it is much simpler and faster. 包含的特征有： 简单的属性特征：价格、酒店设施、历史预定统计等 Smart Pricing：Customized Regression Model for Airbnb Dynamic Pricing Similarity of listing：Real-time Personalization using Embeddings for Search Ranking at Airbnb 3 Failed Models3.1 Listing ID每个Listing都有其相对应的唯一ID，使用Listing id作为特征。 将高基数的类别特征做Embedding，在很多应用上取得了成功，如NLP中单词的Embedding的应用，谷歌的推荐系统中用户id和视频id的Embedding。 但是用Listing ids做Embedding特征导致了过拟合问题，究其原因是由于数据量不足。即使是最受欢迎的Listing，也可以在一年中最多预订365次，而且每个Listing的典型预订量要少得多。 NLP中单词的Embedding时，word可以无限制的重复；谷歌的推荐系统中用户id和视频id的同样也是可以不断重复出现。但是Airbnb的独特业务性质，导致了该方案的失败。 3.2 Multi-task learningbookings有物理限制，但是用户浏览listing详情页没有限制。进一步发现，用户长时间的浏览listing详情页和bookings是正相关的。 为了解决Listing ids过拟合的问题，建立了多任务学习的模型，同时预测一间房间booking的概率和长时间浏览的概率。最重要的是，Listing id的Embedding输入隐层后，在网络模型中进行了共享。因此我们这样做的动机是希望能够从长时间浏览中学习的信息来预测booking，避免过拟合。 由于长时间浏览的label是远超过bookings用户几个数量级的，在booking loss上使用了更高的权重作为补偿。后面将长时间浏览的label调整为 log(view duration) ，在线打分时，我们仅使用了预测booking。 长时间浏览的数据可能由于高端和高价格的listings所主导， 关于listing的浏览后续会作为一个专题进行深入研究。 4 特征工程刚开始baseline使用的GBDT做了大量的特征工程，典型的特征转换，包括计算比率，窗口滑动平均等等。 4.1 Feature normalization刚开始时用与GBDT相同的输入特征来训练NN，效果很差，因为树模型对特征的大小不敏感，而神经网络的输入需要进行归一化。决策树对数值型特征的大小并不是很重要，只要表征有序就可以，而神经网络对此很敏感。如果输入特征的数值超过通常特征值的范围，在做反向传播计算的时候，就会引起大的梯度改变。由于梯度消失，会导致像 ReLU 这样的激活函数处于永久关闭状态。为了避免这个现象的发生，我们要保证所有特征的值域在一个小的范围内变化。通常的做法是让特征的分布值域在｛-1,1｝，中心点映射到 0。 正态分布的特征进行中心归一化，即 (feature_val − µ)/σ 幂律分布的特征进行log归一化，即 log((1+feature_val)/(1+median)) We wanted the feature to be evenly distributed around 0. Putting the median in the denominator ensures that. The offset of 1 is to equalize the offset of 1 in the numerator. power law distribution: 4.2 Feature distribution除了将特征映射到一个限制的数值范围，本文确保绝大部分的特征服从平滑的分布。原因如下： 定位异常 ( Spotting bugs）：在处理数以亿计的特征样本时，我们如何验证它们中的一小部分没有错误？ 范围检查很有用但有限。 我们发现分布的平滑性是发现错误的宝贵工具，因为错误的分布通常与典型的分布不同。 举个例子，我们在某些地区的价格记录中，存在与市价明显不一致的错误。 这是因为在这些地区，对于超过28天的期间，记录的价格是每月价格而不是每日价格。 这些错误表现为分布图上的尖峰。 提升泛化（Facilitating generalization）：根据我们应用DNNs进行观察时所积累的经验，输出层的分布会逐渐变得越来越平滑。图 8 画出了最后一层输出的分布，图 9和图 10 分别展示了第一层和第二层的分布 我们如何测试模型在登录样本的泛化效果很好呢？在调试并应用适当的标准化时，大多数特征都获得了平滑分布，但有一些我们不得不做专门的特征工程。有个例子是listing的地理位置，由经度和纬度表示。为了使地理特征分布更平滑，通过计算与中心点的偏移量来表征地理特征信息。 检查特征完整性（Checking feature completeness）：某些特征的分布不平滑，会导致模型学习信息缺失。有个例子是房屋未来可以被占用的天数。调查发现列表中有一些房屋有最低的住宿要求，可能延长到几个月。但是我们没有在模型中添加最小所需停留时间，因为它取决于日历并且过于复杂。 但是，如果考虑入住率分布，我们添加了listing平均居住时长作为模型的一个特征。 在一个维度上缺乏平滑分布的一些特征可能在更高维度上变得平滑。 如果这些维度已经可用于模型，那么我们有必要仔细思考，如果没有，那么添加它们。 4.3 High cardinality categorical features过拟合的Listing ID不是我们尝试的唯一高基数类别特征。对于NN而言，我们还有其他一些尝试，通过很少的特征工程获得了高回报。 通过一个具体的例子最好证明这一点。 客人对一个城市的各个临近城市的偏好是一个重要的位置信号。 对于GBDT模型，这些信息由一个设计严密的pipeline提供，该pipeline跟踪社区和城市的预订等级分布。 建设和维护这条pipeline所付出的努力是巨大的。 然而，它并未考虑预订房源价格等关键要素。 在神经网络中，处理这些信息就很简单了。 我们通过获取查询中指定的城市和与Listing对应的12级S2 cell格来创建新的分类特征。 发现了地理偏好，比如旧金山西海湾南部的位置比跨越桥梁的位置更受欢迎，后者往往交通拥堵频发。 5 系统工程 Protobufs and Datasets Refactoring static features Java TM NN library 6 超参数 Dropout Dropout as data augmentation. https://arxiv.org/abs/1506.08700 dropout一般被看做很多共享参数模型的集合，即bagging；这篇文章从数据增强角度给予解释，dropout可以看成无领域知识的情况下在输入空间进行数据增强的方法。dropout强迫一个神经单元，和随机挑选出来的其他神经单元共同工作，达到好的效果。消除减弱了神经元节点间的联合适应性，增强了泛化能力。 Initialization Xavier initialization：$$\\text{Var}(W) = \\frac{1}{n_\\text{in}}$$ Glorot &amp; Bengio’s paper originally recommended using $$\\text{Var}(W) = \\frac{2}{n_\\text{in} + n_\\text{out}}$$ Learning rate LazyAdamOptimizer Tensorflow has a “Lazy Adam Optimizer“ that only updates the gradient for variables whose indices appear in the current batch. This may be a good idea for very sparse data like language models. Vanilla Adam updates all parameters at every step, while lazy Adam only updates parameters that are actually employed – in a sparse setting like a language model, that can make a big difference, because lazy Adam applies no updates to rare words until they appear, at which time they get a big update. More common words are updated more frequently. Batch size How much training data do you need? 7 特征重要性总的来说，评估特征重要性和模型可解释性是我们向NN转移的一个领域。评估特征重要性对于优先考虑工程工作和指导模型迭代至关重要。 NN的优势在于理解特征之间的非线性组合。 当理解特定特征扮演什么角色时，这也是一个弱点，因为非线性交互使得单独研究任何特征变得非常困难。 接下来，我们将重述一些破译NN的尝试。 分数分数（Score Decomposition）：我们最初的做法是获取神经网络产生的最终得分，并尝试将其分解为各个节点贡献得分。没有纯净的方法来分离是特定传入节点的影响，还是像ReLU这样的非线性激活函数的影响。 消除测试（Ablation Test）： Permutation Test TopBot Analysis：我们自创了一个工具，旨在不以任何方式扰乱特征来解释特征，命名为TopBot，是上下分析器的缩写。将测试集作为输入，并使用模型对每个测试qurey对应的列表进行排序。 然后，它从每个query顶部排名listing中生成特征值的分布图，并将它们与底部listing中的特征值分布进行比较。 可以看到price在top listing和bottom listing还是有区别的，top listing更倾向于拥有相对小的price，表示模型对价格敏感。而review count却没有任何区别。 从这里，也可以得到一些信息。 8 回顾总结 图15总结了我们迄今为止的深度学习历程。在无处不在的深度学习成功故事的基础上，我们开始处于乐观的高峰期，认为深度学习将成为GBDT模型的替代品，并为我们带来惊人的收益。许多初步讨论都集中在保持其他一切不变，并用神经网络取代当前模型，以了解我们可以获得的收益。这使我们陷入绝望之谷，最初这些收益都没有实现。事实上，我们在开始时看到的只是在线指标的回归。随着时间的推移，我们意识到转向深度学习根本不是替代模型;而是关于扩展系统。因此，它需要重新思考模型周围的整个系统。限制在较小的尺度，像GBDT这样的型号可以说性能相当，更容易处理，我们继续将它们用于集中的中型问题。 那么我们是否会向其他人推荐深度学习？那将是一个全心全意的。而且这不仅是因为该模型在线表现的强劲增长。其中一部分与深度学习如何改变我们的路线图有关。早期的重点主要是功能工程，但在深入学习之后，尝试手动对功能进行更好的数学运算已经失去了光彩。这使我们能够在更高层次上解决问题，例如我们如何改进优化目标，并且我们是否准确地代表了所有用户？在采用神经网络搜索排名的第一步后两年，我们觉得我们刚刚开始。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/categories/机器学习/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://easonlv.github.io/tags/paper/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://easonlv.github.io/tags/Deep-Learning/"}],"keywords":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/categories/机器学习/"}]},{"title":"Spark中ml和mlib的区别","slug":"Spark中ml和mllib的区别","date":"2017-04-14T05:30:41.000Z","updated":"2017-04-14T05:33:09.000Z","comments":true,"path":"2017/04/14/Spark中ml和mllib的区别/","link":"","permalink":"http://easonlv.github.io/2017/04/14/Spark中ml和mllib的区别/","excerpt":"","text":"本文转自 Spark中ml和mllib的区别 Spark中ml和mllib的主要区别和联系如下： ml和mllib都是Spark中的机器学习库，目前常用的机器学习功能2个库都能满足需求。 spark官方推荐使用ml, 因为ml功能更全面更灵活，未来会主要支持ml，mllib很有可能会被废弃(据说可能是在spark3.0中deprecated）。 ml主要操作的是DataFrame, 而mllib操作的是RDD，也就是说二者面向的数据集不一样。 DataFrame和RDD什么关系？DataFrame是Dataset的子集，也就是Dataset[Row], 而DataSet是对RDD的封装，对SQL之类的操作做了很多优化。 相比于mllib在RDD提供的基础操作，ml在DataFrame上的抽象级别更高，数据和操作耦合度更低。 ml中的操作可以使用pipeline, 跟sklearn一样，可以把很多操作(算法/特征提取/特征转换)以管道的形式串起来，然后让数据在这个管道中流动。大家可以脑补一下Linux管道在做任务组合时有多么方便。 ml中无论是什么模型，都提供了统一的算法操作接口，比如模型训练都是fit；不像mllib中不同模型会有各种各样的trainXXX。 mllib在spark2.0之后进入维护状态, 这个状态通常只修复BUG不增加新功能。 以上就是ml和mllib的主要异同点。下面是ml和mllib逻辑回归的例子，可以对比看一下， 虽然都是模型训练和预测，但是画风很不一样。 mllib中逻辑回归的例子1234567891011121314151617181920212223242526272829303132333435363738394041&gt;&gt;&gt; sparse_data = [... LabeledPoint(0.0, SparseVector(2, &#123;0: 0.0&#125;)),... LabeledPoint(1.0, SparseVector(2, &#123;1: 1.0&#125;)),... LabeledPoint(0.0, SparseVector(2, &#123;0: 1.0&#125;)),... LabeledPoint(1.0, SparseVector(2, &#123;1: 2.0&#125;))... ]&gt;&gt;&gt; lrm = LogisticRegressionWithSGD.train(sc.parallelize(sparse_data), iterations=10)&gt;&gt;&gt; lrm.predict(array([0.0, 1.0]))1&gt;&gt;&gt; lrm.predict(array([1.0, 0.0]))0&gt;&gt;&gt; lrm.predict(SparseVector(2, &#123;1: 1.0&#125;))1&gt;&gt;&gt; lrm.predict(SparseVector(2, &#123;0: 1.0&#125;))0&gt;&gt;&gt; import os, tempfile&gt;&gt;&gt; path = tempfile.mkdtemp()&gt;&gt;&gt; lrm.save(sc, path)&gt;&gt;&gt; sameModel = LogisticRegressionModel.load(sc, path)&gt;&gt;&gt; sameModel.predict(array([0.0, 1.0]))1&gt;&gt;&gt; sameModel.predict(SparseVector(2, &#123;0: 1.0&#125;))0&gt;&gt;&gt; from shutil import rmtree&gt;&gt;&gt; try:... rmtree(path)... except:... pass&gt;&gt;&gt; multi_class_data = [... LabeledPoint(0.0, [0.0, 1.0, 0.0]),... LabeledPoint(1.0, [1.0, 0.0, 0.0]),... LabeledPoint(2.0, [0.0, 0.0, 1.0])... ]&gt;&gt;&gt; data = sc.parallelize(multi_class_data)&gt;&gt;&gt; mcm = LogisticRegressionWithLBFGS.train(data, iterations=10, numClasses=3)&gt;&gt;&gt; mcm.predict([0.0, 0.5, 0.0])0&gt;&gt;&gt; mcm.predict([0.8, 0.0, 0.0])1&gt;&gt;&gt; mcm.predict([0.0, 0.0, 0.3])2 ml中的逻辑回归的例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&gt;&gt;&gt; from pyspark.sql import Row&gt;&gt;&gt; from pyspark.ml.linalg import Vectors&gt;&gt;&gt; bdf = sc.parallelize([... Row(label=1.0, weight=2.0, features=Vectors.dense(1.0)),... Row(label=0.0, weight=2.0, features=Vectors.sparse(1, [], []))]).toDF()&gt;&gt;&gt; blor = LogisticRegression(maxIter=5, regParam=0.01, weightCol=\"weight\")&gt;&gt;&gt; blorModel = blor.fit(bdf)&gt;&gt;&gt; blorModel.coefficientsDenseVector([5.5...])&gt;&gt;&gt; blorModel.intercept-2.68...&gt;&gt;&gt; mdf = sc.parallelize([... Row(label=1.0, weight=2.0, features=Vectors.dense(1.0)),... Row(label=0.0, weight=2.0, features=Vectors.sparse(1, [], [])),... Row(label=2.0, weight=2.0, features=Vectors.dense(3.0))]).toDF()&gt;&gt;&gt; mlor = LogisticRegression(maxIter=5, regParam=0.01, weightCol=\"weight\",... family=\"multinomial\")&gt;&gt;&gt; mlorModel = mlor.fit(mdf)&gt;&gt;&gt; print(mlorModel.coefficientMatrix)DenseMatrix([[-2.3...], [ 0.2...], [ 2.1... ]])&gt;&gt;&gt; mlorModel.interceptVectorDenseVector([2.0..., 0.8..., -2.8...])&gt;&gt;&gt; test0 = sc.parallelize([Row(features=Vectors.dense(-1.0))]).toDF()&gt;&gt;&gt; result = blorModel.transform(test0).head()&gt;&gt;&gt; result.prediction0.0&gt;&gt;&gt; result.probabilityDenseVector([0.99..., 0.00...])&gt;&gt;&gt; result.rawPredictionDenseVector([8.22..., -8.22...])&gt;&gt;&gt; test1 = sc.parallelize([Row(features=Vectors.sparse(1, [0], [1.0]))]).toDF()&gt;&gt;&gt; blorModel.transform(test1).head().prediction1.0&gt;&gt;&gt; blor.setParams(\"vector\")Traceback (most recent call last): ...TypeError: Method setParams forces keyword arguments.&gt;&gt;&gt; lr_path = temp_path + \"/lr\"&gt;&gt;&gt; blor.save(lr_path)&gt;&gt;&gt; lr2 = LogisticRegression.load(lr_path)&gt;&gt;&gt; lr2.getMaxIter()5&gt;&gt;&gt; model_path = temp_path + \"/lr_model\"&gt;&gt;&gt; blorModel.save(model_path)&gt;&gt;&gt; model2 = LogisticRegressionModel.load(model_path)&gt;&gt;&gt; blorModel.coefficients[0] == model2.coefficients[0]True&gt;&gt;&gt; blorModel.intercept == model2.interceptTrue","categories":[{"name":"spark","slug":"spark","permalink":"http://easonlv.github.io/categories/spark/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/tags/机器学习/"},{"name":"spark","slug":"spark","permalink":"http://easonlv.github.io/tags/spark/"}],"keywords":[{"name":"spark","slug":"spark","permalink":"http://easonlv.github.io/categories/spark/"}]},{"title":"从晋北到晋中 Day3","slug":"从晋北到晋中-Day3","date":"2017-04-10T14:00:00.000Z","updated":"2017-04-10T15:10:40.000Z","comments":true,"path":"2017/04/10/从晋北到晋中-Day3/","link":"","permalink":"http://easonlv.github.io/2017/04/10/从晋北到晋中-Day3/","excerpt":"","text":"从晋北到晋中Day3 平遥古城 (2107.4.3.) 很多年前我从一个电视节目中看到平遥古城，第一次看到还是蛮震撼的，因此在心中一直有想去古城走走的情节。我有去过很多个古镇，皖南的、苏州的、成都的，还有北方的古北水镇，正是习惯了南方的小桥流水和那般精致，才愈发觉得北方的古城给人一种稳重厚实的感觉，平遥古城也是这样一个地方。 傍晚时分到达平遥古城东门不远的一个宾馆里，放下行李就饥肠辘辘的直奔古城了。昏黄的灯光下，沿路两边的叫卖声，形形色色的游客和熙熙攘攘的车辆，走在石板路上，漫无目的逛了很久，才找了家饭馆吃饭。之前有听说平遥古城内的美食小吃不是一般的难吃，特意选了一家店大人多的，要了平遥特色的各种栲栳栳、长山药等，结果上菜后懵逼了，无色无味难看难吃到无力吐槽，勉强吃了几口逃之夭夭…… 随后逛了逛南大街和西大街，这里是古城内最为繁盛的传统商业街。跟所有旅游区一样，老字号与传统名店铺林立，琳琅满目的工艺品店、美食、酒吧、路边小商贩、特色的足浴室、还有北京玩剩下的VR体验馆等等，文艺气息似乎绝不输给外面世界的任何一个地方。 平遥酒吧一条街没有九寨风情街那样的震耳欲聋，所以走在路上能清楚的听到那些驻唱歌手的歌声都很好听。“我在平遥等你，任凭时光老去······”，街旁的酒吧里，随着有节奏的手鼓声，传来一首平遥之恋的小曲。我在平遥等你是一家有情调的寄明信片的店儿，在古城几条街上看见多次，门外合影的妹子是真多。据说这儿可以寄存你给未来的自己写的信，也难怪这里最受文艺青年的青睐了。 在平遥古城住了一晚，第二天早上起床发现外面下雨了，这个假期还是没有逃掉下雨天，心里有点失望，还没见过阳光明媚蓝天白云下古城慢节奏生活的我，又怎会相信下雨天的古城会有另一番韵味……白天走在城里，视野要开阔很多，遇到下雨天，石板路面很滑，积水很多，鞋子很容易湿。因为只有半天的时间，没法走遍古城纵横交错的四大街、八小街、七十二条蚰蜒巷，甚至连几处出名的古城景点都不愿去找了，索性不再脚步匆匆，避开喧嚣的主干道，走向羊肠小道。总觉得相比丽江和大理的浪漫，平遥古城则低调深沉，充满沧桑，随着岁月的洗涤，破旧的民居年久失修，残砖断瓦，枯木石雕是消失的财富帝国的遗迹，让人满目苍夷。 以前平遥进城收200元门票，城内景点随意观赏，现在进城不需要门票，但是古城里的景点有一张130元的联票，可以去著名的日升昌、县衙、登古城墙……现在的古城越来越商业，越来越喧嚣，很难找到与世无争的安宁，但还是比钢铁丛林的城市森林静谧。在这之前我想象中的平遥古城应该是很多个乔家大院组成的，然后走进城里才发现这儿似乎是多个南锣鼓巷加北锣鼓巷的乡村版。 今天的早饭和午餐也都是在城里吃的，不过对平遥美食已经没有很大的期待了，果断从大众点评上找，平遥最出名的应该还是特色面食栲栳栳和牛肉等，而且消费真的不高。而且在这里我注意到支付方式都是现金、微信或支付宝的转账，没有银联支付和线下移动支付，互联网行业在三四线小城还没有渗透。就像我在宾馆住宿时，老板说的，平遥要是消费提高了，就没人来了，不知道这是不是一种悲哀。 中午12点时启程回京了，从平遥回北京，600多公里，预计八点到京。高速路上，一路尽有清明时节雨纷纷，耳畔回荡着歌声: 开车行驶在公路无际无边，有离开自己的错觉……今天是返程高峰，外面还下雨，车内很黑暗，一觉醒来，发现同行的98年出生的清华建筑系女生，用手机看PDF书籍，划线和高亮做注解，再一觉醒来，她手机开着手电筒，看了一路打印的讲义，旅行和学习，始终在路上，这才是应有的生活态度。","categories":[{"name":"旅行","slug":"旅行","permalink":"http://easonlv.github.io/categories/旅行/"}],"tags":[{"name":"风景","slug":"风景","permalink":"http://easonlv.github.io/tags/风景/"},{"name":"摄影","slug":"摄影","permalink":"http://easonlv.github.io/tags/摄影/"}],"keywords":[{"name":"旅行","slug":"旅行","permalink":"http://easonlv.github.io/categories/旅行/"}]},{"title":"从晋北到晋中 Day2","slug":"从晋北到晋中-Day2","date":"2017-04-10T13:00:00.000Z","updated":"2017-04-10T15:09:44.000Z","comments":true,"path":"2017/04/10/从晋北到晋中-Day2/","link":"","permalink":"http://easonlv.github.io/2017/04/10/从晋北到晋中-Day2/","excerpt":"","text":"从晋北到晋中Day2 云冈石窟→乔家大院 (2107.4.3.) 早上6点半起床，7点出发，走S339省道去云冈石窟，大同这个季节的早上还是有点冷的，需要多穿衣服。 简单介绍下云冈石窟，位于大同市城西约16公里的武周山，石窟依山开凿，是世界文化遗产，也是中国四大石窟之一。参观云冈石窟更像是在阅读一段北魏的历史，迄今1500多年，也就是追溯到公元386年到534年间左右的鲜卑族建立起的北魏王朝。鲜卑是游牧民族，起源于今天的黑龙江额尔古纳河上游与大兴安岭一带，两汉之际开始从东北向南迁徙，在不断的征战中逐步扩大自己的势力范围。公元398年北魏迁都平城（也就是大同），由于佛教的发展及北魏皇帝崇信佛教，开凿云冈石窟。后北魏继续南迁洛阳后，兴建了龙门石窟。 经过历时的洗礼，现在的景区更像是一座公园，从偌大的停车场到售票厅，到新建的庙宇，真正的二十窟，还有博物馆。参观时从第一窟到第二十窟，但是真正修建的时间是从第二十窟到第一窟的，即早期、中期和晚期石窟。前二窟很小但是聚集了很多人，刚进来大家都很好奇吧，这里很多窟是禁止拍照的，中间有三窟正在维护暂停观赏，第二十窟是最大也是最早修建的。云冈石窟重在雕刻，其石像上面的彩色都是清朝时期工匠所为，其他详细的可参看官网的介绍。整个园区环境清幽，不算太大，两个小时足够，对于这类人文历史景观，建议大家在参观时几个人一起请个导游讲解比较好。 上午10点半离开景区，上车时有个插曲，早上出门将未拆封的一瓶纯净水倒入自己的水杯中，可能太过匆忙，杯盖没有扭紧，一杯水流湿了整个书包。书包里的外套全湿，纸巾吸了不少水，因此iPad万幸没有湿。 离开大同，上高速G55，一路向南，赶往乔家大院和平遥古城。 在三天假期的第二天中午，我从晋北到晋中。 汽车行驶在这片黄土高原的高速路上，地势海拔也渐渐从一千米降到几百米。北方的天空虽然是蓝天，却是那种依稀的淡淡的蓝，空气中始终有些雾阻碍视野。 车窗外是一片灰色，让我想起南方的春暖花开是一片绿色，蓝天下沐浴春风和阳光，我想回家乡了。 下午四点到达晋中祁县的乔家大院。乔家大院的出名不知道是否与电影《大红灯笼高高挂》和电视剧《乔家大院》有关，但这座建立于清乾隆间的雄伟壮观的建筑群体，确实设计之精巧，工艺之精细，传闻“皇家有故宫，民宅看乔家”，当然有那么一点夸张的成分。刚走进乔家大院时，以为是走进了博物馆，当你细细观察那奇特的建筑风格，砖瓦磨合，斗拱飞檐，彩饰金装，砖石木雕，像我这个非建筑系毕业的都感叹到精工细做和工艺精湛。当然，乔家大院并不是让你来欣赏建筑的，每个院子每间屋子或多或少有它的故事，关于乔氏几代人家族兴衰的历史。按照今天编剧的写法，这里是会有富二代少爷吸毒而亡，刁蛮千金小姐爱炫富引来绑匪且被撕票等狗血情节的…… 乔家大院不算特别大，全部参观完在2个小时内足够，但是方向感不强的人可能很快被绕晕。夕阳西下，听着广场上播放的电视剧中的那些主题曲，看着周边还在不断翻建的新房子，总觉得这处静谧的大院本该低调却因过渡开发而变得如此喧嚣。 六点钟，从乔家大院离开，去往平遥古城，我最期待的地方。","categories":[{"name":"旅行","slug":"旅行","permalink":"http://easonlv.github.io/categories/旅行/"}],"tags":[{"name":"风景","slug":"风景","permalink":"http://easonlv.github.io/tags/风景/"},{"name":"摄影","slug":"摄影","permalink":"http://easonlv.github.io/tags/摄影/"}],"keywords":[{"name":"旅行","slug":"旅行","permalink":"http://easonlv.github.io/categories/旅行/"}]},{"title":"从晋北到晋中 Day1","slug":"从晋北到晋中-Day1","date":"2017-04-10T12:06:02.000Z","updated":"2017-04-14T05:37:10.000Z","comments":true,"path":"2017/04/10/从晋北到晋中-Day1/","link":"","permalink":"http://easonlv.github.io/2017/04/10/从晋北到晋中-Day1/","excerpt":"","text":"从晋北到晋中Day1 北岳恒山 (2107.4.2.) “人间四月芳菲尽，蕾红叶绿四季春。”今年的春天来的有点晚，这个时节的北方依然是春寒料峭。关于行走山西的计划，一直在我笔记本的List上。平日一直忙于工作，假期去哪也未曾想过，所以临时起意去山西，主要还是北京到山西比较近，更好的利用三天假期时间。清明时节，没有雨纷纷。4月1日在公司里继续忙碌完一天下班后，去超市购物回家后，收拾行李，准备第二天一早的行程。 放假前一天才开始准确行程，略显仓促，没有传说中的说走就走那么惬意。现在每一次的旅行对于我来说，不愿在行走之前的工作日去花时间做计划，那会打乱工作的节奏，相反，我会选择在旅行过程中忘掉工作，随意而行，期待未知的风景。 没有华丽或雅致的文字，没有绝美或文艺的照片，仅为记录这次旅途中的点点滴滴。 山西，太行山之西，历史文化悠久，地理上属于山地高原。对于我这样的南方人，上学时很少遇到山西的同学，来北京工作后倒是遇到不少，因此所了解到的山西比较出名的旅游景点莫过于恒山、五台山、云冈石窟、平遥古城和乔家大院这些了。 五岳中有个形容是东岳泰山之雄，西岳华山之险，北岳恒山之幽，中岳嵩山之峻，南岳衡山之秀。如果用一个字形容恒山，就是幽，是指恒山的幽静。恒山位于大同市浑源县境内，自古即为道教圣地，所以山上以寺庙为核心。 下午1点半到了恒山脚下的悬空寺，由于人太多，没有去登寺，远远望了两眼直奔恒山正门，也算是一个遗憾。恒山上山的路比较好走，没有很多的盘山公路，所以开车很快就能到半山腰处的大门，这里已经有海拔一千五百米左右（晋北地势较高，海拔均在一千米左右），所以从大门检票到登顶，其实也就累积上升几百米的高度，因此爬行难度系数低。 大概2点时下车稍作休息吃了点东西，平缓了下身体，开始登山。登山的路一直都是在平稳上升，没有曲折的路段，也没有之前爬山遇到的绝望坡、九十九道弯、百步云梯等险峻的台阶。据说后线山道较险，路边绝壁如墙，沿途自然景观极佳，是驴友的最爱。 这个季节在南方已经春暖花开，然而在北方早晚还是很冷的。恒山上沿途有很多积雪，远处的群山顶上也有大片积雪如同雪山。网上看到图文说登山最好的时节是五六月，山上花开茂盛，绿意盎然，而不像现在还几乎是光秃秃的一片。下午3:45就到了山顶主峰天峰岭，海拔2017米，这儿聚集好多人在排队和主碑合影留念。我们在上面停留了一会儿4点时开始下山，45分钟到达起点。从用时来看，上山2小时，下山1小时，足矣。 5点多出发离开恒山，奔赴大同市里，一个半小时候后到达酒店——魏都生态乐园酒店。作为煤矿资源发达的城市，大同的路上重卡车太多，如果自驾游需要注意了，担心大车盲区。我们住的四星级酒店紧挨着高速出口，类似于城郊区，离市中心很多路，以至于晚上都没有地方吃饭。最近的中信广场走过去花了有40分钟，一开始不知道会有这么多路，在滴滴叫不到车的情况下做了个错误的决定。后来才知道大同没有滴滴快车，只有出租车，不知道是不是出于地方保护政策。 八点多的城里，很多店铺都关门了，路上很安静，这对在北京习惯夜生活的我们来说有点不适应。在市里找到一家孟记面馆，不免俗套的要一份大同刀削面，才十块钱，面的味道还行，没让人失望。吃完饭在旁边的小超市买点吃的，然后打车回去，出租车漫天要价，于是第一辆车我拒绝了，叫了很久才叫到第二辆车。跟师傅聊天，问沿途的这些大烟囱和白色排放物，以及空气中弥漫的二氧化硫味。师傅告知那是大同第二发电厂，专为北京输电，飘出的是水蒸气不是污染物。还有大同的煤虽很出名，但都以低价卖给河北了，后来要债都要不回来……师傅还说这个季节有点冷，大同没啥好看的，要等到六月份来才行…师傅没有打表，自己估算了下路程，然后让给他转账，可能在大同这样一座小城里，任意两个地点之间的路程，对师傅来说经验比工具更为准确和方便。 回到酒店早早躺下，在山西的第一天结束。","categories":[{"name":"旅行","slug":"旅行","permalink":"http://easonlv.github.io/categories/旅行/"}],"tags":[{"name":"风景","slug":"风景","permalink":"http://easonlv.github.io/tags/风景/"},{"name":"摄影","slug":"摄影","permalink":"http://easonlv.github.io/tags/摄影/"}],"keywords":[{"name":"旅行","slug":"旅行","permalink":"http://easonlv.github.io/categories/旅行/"}]},{"title":"一书一世界","slug":"一书一世界","date":"2017-03-26T08:34:11.000Z","updated":"2017-04-10T12:01:07.000Z","comments":true,"path":"2017/03/26/一书一世界/","link":"","permalink":"http://easonlv.github.io/2017/03/26/一书一世界/","excerpt":"","text":"一书一世界读《岛上书店》岛上书店的原著英文名是The Storied Life of A.J. Fikry，正如英文名直译费克里富有戏剧性的人生，讲述了书店老板A.J.充满故事的生命中，遇到了一些可爱的人，经历着爱与被爱、付出与接受、孤独与陪伴的一生。 A.J. Fikry住在爱丽丝岛上，一个小岛，他拥有岛上唯一的书店，不过最近他更喜欢喝酒，而不是卖书，因为他在为惨死车祸中的妻子妮可感到悲伤。A.J.和妮可是大学的同学，同样都是研究文学的博士生毕业，这也算是志同道合的一对了。妮可去世后，A.J.的颓废使得书店遭遇危机，屋漏偏逢连夜雨，书店里最宝贵的珍藏本图书《帖木儿》也遭窃了。仿佛命运从未眷顾过他，他的内心沦为了荒岛。 就在此时，神秘的小女孩玛雅，出现在书店中， 看似A.J.照顾起这个孤儿，其实也是玛雅意外地拯救了陷于孤独绝境中的A.J.，并且成为了连接他和小姨子伊斯梅、警长兰比亚斯、出版社女业务员阿米莉娅之间的纽带。 阿米莉娅Amelia是一位出版社代表，邀请爱丽丝书店出售本季最新的作品。 A.J.一开始对她并不友好，后来在接触中慢慢心生爱意。这位中年男人不懂的怎样表达，甚至连去她家看望她都很含蓄，连玛雅看着都急，好在最后两个人终在一起。伊斯梅是妮可的姐姐，也就是A.J.的小姨子，可惜遇到了一个花心的丈夫和一个个谎言，最后和警长兰比亚斯心生爱意。兰比亚斯是A.J.的好朋友，职业的敏感让他在伊斯梅家中发现了一些秘密：关于玛雅的身世、那本被盗的书…… 小岛上的主要人物和故事还有很多，但他们的生命紧紧相依，并最终一起走出了人生的困境，遗憾的是A.J.没有战胜肿瘤而离去，书店也有了新的主人，所有对书和生活的热爱都周而复始，愈加汹涌。 如果你喜欢阅读，喜欢书籍和书店，我相信这是一部能吸引你的小说。这儿有些书中的经典语录。 A.J.：“想要了解一个人，你只需要问一个问题‘你最喜欢哪本书？’”“一旦一个人在乎一件事，就发现自己不得不开始在乎一切事。” A.J.向阿米莉亚求婚：“……我可以向你保证有书、有交流，还有我的全心全意，艾米。” 兰比亚斯：“有时候别人跟你说你踏上一种旅程，结果却成了另外一种旅程。”“生活中每一桩糟糕事，几乎都是时机不当的结果，每件好事，都是时机恰到好处的结果。” 《迟暮开花》：“因为从心底害怕自己不值得被爱，我们独来独往。然而就是因为独来独往，才让我们以为自己不值得被爱。有一天，你不知道是什么时候，你会驱车上路。有一天，你不知道是什么时候，你会遇见他。你会被爱，因为你今生第一次真正不再孤单。你会选择不再孤单下去。” 我是利用早上上班坐地铁的半个多小时和晚上睡觉前躺床上看一小时书的时间，零散且不急不慢地在读。从一开始的情节迷茫、情感复杂到最后的人物心理反思，隐情的慢慢暴露，从开始的颓废到心里充满希望走出困境，小岛上的生活仿佛与世隔绝，而爱是最好的礼物，让一无所有的孤岛成为丰富美丽的存在。 所以，每一本书，都是一个世界。","categories":[{"name":"读书","slug":"读书","permalink":"http://easonlv.github.io/categories/读书/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://easonlv.github.io/tags/读书笔记/"}],"keywords":[{"name":"读书","slug":"读书","permalink":"http://easonlv.github.io/categories/读书/"}]},{"title":"Mac系统安装Xgboost","slug":"Mac系统安装Xgboost","date":"2017-03-24T14:40:41.000Z","updated":"2017-03-24T15:01:59.000Z","comments":true,"path":"2017/03/24/Mac系统安装Xgboost/","link":"","permalink":"http://easonlv.github.io/2017/03/24/Mac系统安装Xgboost/","excerpt":"","text":"Mac系统安装XgboostXgboost是大规模并行boosted tree的工具，它是目前最快最好的开源boosted tree工具包，比常见的工具包快10倍以上。在数据科学方面，有大量kaggle选手选用它进行数据挖掘比赛，其中包括两个以上kaggle比赛的夺冠方案。在工业界规模方面，xgboost的分布式版本有广泛的可移植性，支持在YARN, MPI, Sungrid Engine等各个平台上面运行，并且保留了单机并行版本的各种优化，使得它可以很好地解决于工业界规模的问题。 本文是我今天在Mac系统下成功安（cai）装（keng）Xgboost的笔记（Windows系统用户请出门左转），Mac系统10.12版本按照Xgboost官网安装指南，出现了错误。 如果按照传统Python库用pip来安装：sudo pip install xgboost，同样出现了错误，最后亲测下面方法安装成功。 1.安装 HomebrewHomebrew是Mac系统下非常优秀的包管理工具，相当于Ubuntu的apt-get，安装命令： 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 2.安装最新版本的gcc，即gcc-6Mac系统默认有Python、Ruby、Shell等环境，但是没有gcc和g++的，安装XCode之后会有clang，而XCode自带的clang是不支持OpenMP的，所以需要重新安装gcc。这个过程比较久，一直在下载，网速快的话差不多半个多小时吧。 1brew install gcc --without-multilib 3.下载Xgboost的git源码12git clone --recursive https://github.com/dmlc/xgboost cd xgboost 4.修改配置文件，用于编译1cp make/config.mk ./config.mk 用vim打开config.mk，修改下面两行： 12export CC = gcc-6export CXX = g++-6 这样做是为了用之前下载的gcc-6而不是系统已有的gcc来编译。本来按照官网的 make -j4 来编译，但是未成功，所以改用下面这种方法来编译： 1./build.sh 5.安装python版Xgboost安装Xgboost的Python版需要Numpy、Scipy等数值计算库，建议安装Anaconda，所有的科学计算和数据挖掘库都安装好了。 12cd python-packagesudo python setup.py install 6.打开Python验证1&gt;&gt;&gt; import xgboost as xgb OK，没有报错，安装成功。下面你可以用Xgboost算法来玩数据了，官网有好多Example来学习。 12345678910import xgboost as xgb# read in datadtrain = xgb.DMatrix('demo/data/agaricus.txt.train')dtest = xgb.DMatrix('demo/data/agaricus.txt.test')# specify parameters via mapparam = &#123;'max_depth':2, 'eta':1, 'silent':1, 'objective':'binary:logistic' &#125;num_round = 2bst = xgb.train(param, dtrain, num_round)# make predictionpreds = bst.predict(dtest) 如果你想玩kaggle比赛，Xgboost这把屠龙刀更不可少。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/categories/机器学习/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/tags/机器学习/"},{"name":"xgboost","slug":"xgboost","permalink":"http://easonlv.github.io/tags/xgboost/"}],"keywords":[{"name":"机器学习","slug":"机器学习","permalink":"http://easonlv.github.io/categories/机器学习/"}]},{"title":"spark学习之RDD","slug":"spark学习之RDD","date":"2016-10-03T15:47:41.000Z","updated":"2017-04-10T12:01:22.000Z","comments":true,"path":"2016/10/03/spark学习之RDD/","link":"","permalink":"http://easonlv.github.io/2016/10/03/spark学习之RDD/","excerpt":"","text":"1.RDD基础Spark对数据的核心抽象——弹性分布式数据集(Resilient Distributed Dataset,简称RDD)。RDD其实就是分布式的元素集合。在 Spark中,对数据的所有操作不外乎创建 RDD、转化已有RDD以及调用RDD操作进行求值。而在这一切背后,Spark会自动将RDD中的数据分发到集群上,并将操作并行化执行。 2. 创建RDDSpark提供了两种创建 RDD 的方式: 读取外部数据集 1val lines = sc.textFile(&quot;/path/to/README.md&quot;) 在程序中对一个集合进行并行化 1val lines = sc.parallelize(List(\"pandas\", \"i like pandas\")) 3. RDD操作RDD 支持两种操作: 转化操作 transformation 和 行动操作 action 3.1 转化操作转化操作是返回一个新的 RDD 的操作,比如 map() 和 filter()map() 接收一个函数,把这个函数用于 RDD 中的每个元素, 将函数的返回结果作为结果RDD中对应元素的值。 如用Scala 实现map计算 RDD中各值的平方： 123val input = sc.parallelize(List(1, 2, 3, 4))val result = input.map(x =&gt; x * x)println(result.collect().mkString(&quot;,&quot;)) flatMap()和 map() 类似,函数被分别应用到了输入 RDD 的每个元素上,不过返回的不是一个元素,而是一个返回值序列的迭代器。即对每个输入元素生成多个输出元素，得到由各列表中的元素组成的 RDD。filter() 则接收一个函数,并将 RDD 中满足该函数的 元素放入新的 RDD 中返回，如用 Scala 实现 filter() 转化操作: 12val inputRDD = sc.textFile(&quot;log.txt&quot;)val errorsRDD = inputRDD.filter(line =&gt; line.contains(&quot;error&quot;)) 函数 功能 示例 结果 map() 将函数应用于 RDD 中的每个元素,将返回值构成新的RDD rdd.map(x =&gt; x + 1) {2, 3, 4, 4} flatMap() 将函数应用于 RDD 中的每个元素,将返回的迭代器的所有内容构成新的RDD，通常用来切分单词 rdd.flatMap(x =&gt; x.to(3)) {1, 2, 3,2, 3, 3, 3} filter() 返回一个由通过传给 filter() 的函数的元素组成的 RDD rdd.filter(x =&gt; x != 1) {2, 3, 3} distinct() 去重 rdd.distinct() {1, 2, 3} sample(withReplacement, fraction, [seed]) 对 RDD 采样,以及是否替换 rdd.sample(false, 0.5) 非确定的 3.2 行动操作行动操作则是向程序返回结果或把结果写入外部系统的操作,会触发实际的计算,比如 count() 和 first()在 Scala 中使用行动操作对错误进行计数： 123println(&quot;Input had &quot; + badLinesRDD.count() + &quot; concerning lines&quot;)println(&quot;Here are 10 examples:&quot;)badLinesRDD.take(10).foreach(println) reduce()接收一个函数作为参数,这个函数操作两个RDD的元素类型的数据并返回一个同样类型的新元素。一个简单的例子就是函数 + ,可以用它来对RDD进行累加。Scala 中的 reduce()： 1val sum = rdd.reduce((x, y) =&gt; x + y) fold() 和 reduce() 类似,接收一个与 reduce() 接收的函数签名相同的函数,再加上一个 “初始值”来作为每个分区第一次调用时的结果。例如 + 对应的 0, * 对应的 1,或拼接操作对应的空列表 collect() 函数可以用来获取整个 RDD 中的数据，但collect() 不能用在大规模数据集上，仅当整个数据集能在单台机器的内存中放得下时才能使用。 saveAsTextFile()、saveAsSequenceFile(),或者任意的其他行动操作来把 RDD 的数据内容以各种自带的格式保存起来。 4. RDD持久化默认情况下RDD的内容是临时的，但Spark提供了在RDD中持久化数据的机制。第一次调用动作并计算出RDD内容后，RDD的内容可以存储在集群的内存或磁盘上。这样下一次需要调用依赖该RDD的动作时，就不需要从依赖关系中重新计算RDD，数据可以从缓存分区中直接返回： cached.cache()cached.count()cached.take(10) 在上述代码中，cache方法调用指示在下次计算RDD后，要把RDD存储起来。调用count会导致第一次计算RDD。采取（take）这个动作返回一个本地的Array，包含RDD的前10个元素。但调用take时，访问的是cached已经缓存好的元素，而不是从cached的依赖关系中重新计算出来的。 当Spark持久化存储一个RDD 时，计算出 RDD 的节点会分别保存它们所求出的分区数据。如果一个有持久化数据的节点发生故障，Spark会在需要用到缓存的数据时重算丢失的数据分区。Spark为持久化RDD定义了几种不同的机制，用不同的StorageLevel值表示。 rdd.cache()是rdd.persist(StorageLevel.MEMORY)的简写，它将RDD存储为未序列化的对象。","categories":[],"tags":[{"name":"spark","slug":"spark","permalink":"http://easonlv.github.io/tags/spark/"}],"keywords":[]},{"title":"Implemention of QuickSork","slug":"Implemention-of-QuickSork","date":"2016-09-24T16:55:25.000Z","updated":"2017-04-10T12:02:25.000Z","comments":true,"path":"2016/09/25/Implemention-of-QuickSork/","link":"","permalink":"http://easonlv.github.io/2016/09/25/Implemention-of-QuickSork/","excerpt":"","text":"快速排序###算法过程快速排序 的思想很简单，整个排序过程只需要三步： 在数据集之中，找一个基准点； 建立两个数组，分别存储左边和右边的数组； 利用递归进行下次比较。 Java代码1234567891011121314151617181920212223242526272829303132333435public class QuickSort &#123; //一次划分 public static int partition(int[] arr, int left, int right) &#123; int pivotKey = arr[left]; int pivotPointer = left; while(left &lt; right) &#123; while(left &lt; right &amp;&amp; arr[right] &gt;= pivotKey) right --; while(left &lt; right &amp;&amp; arr[left] &lt;= pivotKey) left ++; swap(arr, left, right); //把大的交换到右边，把小的交换到左边。 &#125; swap(arr, pivotPointer, left); //最后把pivot交换到中间 return left; &#125; public static void quickSort(int[] arr, int left, int right) &#123; if(left &gt;= right) return ; int pivotPos = partition(arr, left, right); quickSort(arr, left, pivotPos-1); quickSort(arr, pivotPos+1, right); &#125; public static void sort(int[] arr) &#123; if(arr == null || arr.length == 0) return ; quickSort(arr, 0, arr.length-1); &#125; public static void swap(int[] arr, int left, int right) &#123; int temp = arr[left]; arr[left] = arr[right]; arr[right] = temp; &#125;&#125; C代码12345678910111213141516171819202122232425int Division(int a[],int left, int right) //分割&#123; int base=a[left]; //基准元素 while(left&lt;right) &#123; while(left&lt;right &amp;&amp; a[right]&gt;base) --right; //从右向左找第一个比基准小的元素 a[left]=a[right]; while(left&lt;right &amp;&amp; a[left]&lt;base ) ++left; //从左向右找第一个比基准大的元素 a[right]=a[left]; &#125; a[left]=base; return left;&#125;void QuickSort(int a[],int left,int right)&#123; int i,j; if(left&lt;right) &#123; i=Division(a,left,right); //分割 QuickSort(a,left,i-1); //将两部分分别排序 QuickSort(a,i+1,right); &#125;&#125; JavaScript代码123456789101112131415161718192021function quickSort(arr)&#123; if(arr.length&lt;=1)&#123; return arr;//如果数组只有一个数，就直接返回； &#125; var num = Math.floor(arr.length/2);//找到中间数的索引值，如果是浮点数，则向下取整 var numValue = arr.splice(num,1);//找到中间数的值 var left = []; var right = []; for(var i=0;i&lt;arr.length;i++)&#123; if(arr[i]&lt;numValue)&#123; left.push(arr[i]);//基准点的左边的数传到左边数组 &#125; else&#123; right.push(arr[i]);//基准点的右边的数传到右边数组 &#125; &#125; return quickSort(left).concat(numValue,quickSort(right));//递归不断重复比较&#125;alert(quickSort([32,45,37,16,2,87]));//弹出“2,16,32,37,45,87” Python代码12345678910111213141516171819202122232425#!/usr/bin/python# -*- coding: utf-8 -*-def sub_sort(array,low,high): key = array[low] while low &lt; high: while low &lt; high and array[high] &gt;= key: high -= 1 while low &lt; high and array[high] &lt; key: array[low] = array[high] low += 1 array[high] = array[low] array[low] = key return lowdef quick_sort(array,low,high): if low &lt; high: key_index = sub_sort(array,low,high) quick_sort(array,low,key_index) quick_sort(array,key_index+1,high)if __name__ == '__main__': array = [8,10,9,6,4,16,5,13,26,18,2,45,34,23,1,7,3] print array quick_sort(array,0,len(array)-1) print array R代码1234567891011121314151617qsort &lt;- function(v) &#123; if ( length(v) &gt; 1 ) &#123; pivot &lt;- (min(v) + max(v))/2.0 c(qsort(v[v &lt; pivot]), v[v == pivot], qsort(v[v &gt; pivot])) &#125; else v&#125;N &lt;- 100vs &lt;- runif(N)system.time(u &lt;- qsort(vs))print(u)Qsort &lt;- function(x)&#123; if (length(x) &lt; 2) return(x) return(c(Qsort(x[x&lt;x[1]]), x[x==x[1]], Qsort(x[x&gt;x[1]])))&#125;","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://easonlv.github.io/tags/数据结构/"}],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2016-09-22T07:14:27.000Z","updated":"2016-09-22T07:14:27.000Z","comments":true,"path":"2016/09/22/hello-world/","link":"","permalink":"http://easonlv.github.io/2016/09/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}
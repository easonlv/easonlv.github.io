{"meta":{"title":"Diving into Data","subtitle":null,"description":null,"author":"Eason Lv","url":"http://easonlv.github.io"},"pages":[{"title":"","date":"2016-09-28T11:13:34.000Z","updated":"2016-09-28T11:13:34.000Z","comments":false,"path":"tags/index.html","permalink":"http://easonlv.github.io/tags/index.html","excerpt":"","text":"title: tags date: 2016-09-28 19:12:36"}],"posts":[{"title":"Implemention of QuickSork","slug":"Implemention-of-QuickSork","date":"2016-09-24T16:55:25.000Z","updated":"2016-09-30T08:48:00.000Z","comments":true,"path":"2016/09/25/Implemention-of-QuickSork/","link":"","permalink":"http://easonlv.github.io/2016/09/25/Implemention-of-QuickSork/","excerpt":"","text":"快速排序###算法过程快速排序 的思想很简单，整个排序过程只需要三步： 在数据集之中，找一个基准点； 建立两个数组，分别存储左边和右边的数组； 利用递归进行下次比较。 Java代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public class QuickSort &#123; //一次划分 public static int partition(int[] arr, int left, int right) &#123; int pivotKey = arr[left]; int pivotPointer = left; while(left &lt; right) &#123; while(left &lt; right &amp;&amp; arr[right] &gt;= pivotKey) right --; while(left &lt; right &amp;&amp; arr[left] &lt;= pivotKey) left ++; swap(arr, left, right); //把大的交换到右边，把小的交换到左边。 &#125; swap(arr, pivotPointer, left); //最后把pivot交换到中间 return left; &#125; public static void quickSort(int[] arr, int left, int right) &#123; if(left &gt;= right) return ; int pivotPos = partition(arr, left, right); quickSort(arr, left, pivotPos-1); quickSort(arr, pivotPos+1, right); &#125; public static void sort(int[] arr) &#123; if(arr == null || arr.length == 0) return ; quickSort(arr, 0, arr.length-1); &#125; public static void swap(int[] arr, int left, int right) &#123; int temp = arr[left]; arr[left] = arr[right]; arr[right] = temp; &#125;&#125;``` ### C代码``` cint Division(int a[],int left, int right) //分割&#123; int base=a[left]; //基准元素 while(left&lt;right) &#123; while(left&lt;right &amp;&amp; a[right]&gt;base) --right; //从右向左找第一个比基准小的元素 a[left]=a[right]; while(left&lt;right &amp;&amp; a[left]&lt;base ) ++left; //从左向右找第一个比基准大的元素 a[right]=a[left]; &#125; a[left]=base; return left;&#125;void QuickSort(int a[],int left,int right)&#123; int i,j; if(left&lt;right) &#123; i=Division(a,left,right); //分割 QuickSort(a,left,i-1); //将两部分分别排序 QuickSort(a,i+1,right); &#125;&#125; JavaScript代码123456789101112131415161718192021function quickSort(arr)&#123; if(arr.length&lt;=1)&#123; return arr;//如果数组只有一个数，就直接返回； &#125; var num = Math.floor(arr.length/2);//找到中间数的索引值，如果是浮点数，则向下取整 var numValue = arr.splice(num,1);//找到中间数的值 var left = []; var right = []; for(var i=0;i&lt;arr.length;i++)&#123; if(arr[i]&lt;numValue)&#123; left.push(arr[i]);//基准点的左边的数传到左边数组 &#125; else&#123; right.push(arr[i]);//基准点的右边的数传到右边数组 &#125; &#125; return quickSort(left).concat(numValue,quickSort(right));//递归不断重复比较&#125;alert(quickSort([32,45,37,16,2,87]));//弹出“2,16,32,37,45,87” Python代码12345678910111213141516171819202122232425#!/usr/bin/python# -*- coding: utf-8 -*-def sub_sort(array,low,high): key = array[low] while low &lt; high: while low &lt; high and array[high] &gt;= key: high -= 1 while low &lt; high and array[high] &lt; key: array[low] = array[high] low += 1 array[high] = array[low] array[low] = key return lowdef quick_sort(array,low,high): if low &lt; high: key_index = sub_sort(array,low,high) quick_sort(array,low,key_index) quick_sort(array,key_index+1,high)if __name__ == '__main__': array = [8,10,9,6,4,16,5,13,26,18,2,45,34,23,1,7,3] print array quick_sort(array,0,len(array)-1) print array R代码1234567891011121314151617qsort &lt;- function(v) &#123; if ( length(v) &gt; 1 ) &#123; pivot &lt;- (min(v) + max(v))/2.0 c(qsort(v[v &lt; pivot]), v[v == pivot], qsort(v[v &gt; pivot])) &#125; else v&#125;N &lt;- 100vs &lt;- runif(N)system.time(u &lt;- qsort(vs))print(u)Qsort &lt;- function(x)&#123; if (length(x) &lt; 2) return(x) return(c(Qsort(x[x&lt;x[1]]), x[x==x[1]], Qsort(x[x&gt;x[1]])))&#125;","categories":[],"tags":[],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2016-09-22T07:14:27.000Z","updated":"2016-09-22T07:14:27.000Z","comments":true,"path":"2016/09/22/hello-world/","link":"","permalink":"http://easonlv.github.io/2016/09/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}